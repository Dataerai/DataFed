
include:
  - local: .gitlab/stage_build_base.yml
  - local: .gitlab/stage_image_check.yml
  - local: .gitlab/stage_build.yml
  - local: .gitlab/end_to_end.yml

stages:
  - ci-infrastructure-check
  - trigger-infrastructure
  - signal
  - clear-docker-cache
  - build-base
  - provision-client
  - image-check
  - build
  - end-to-end-setup-arango
  - end-to-end-setup
  - end-to-end-test

# WARNING
#
# Do not put if else statements without if and else, gitlab yaml does not like
# this kind of scripting
#
# [ -f file_path ] && ok do this....

variables:
  HARBOR_USER: 'robot$$datafed+harbor_datafed_gitlab_ci_registry_2'
  REGISTRY: 'camden.ornl.gov'
  DATAFED_DEPENDENCIES_INSTALL_PATH: "/shared/install"
################################################################################
# STAGE: ci-infrastructure-check
################################################################################
# ci-infrastructure-check stage is designed to check that the infrastructure is
# up and running before attempting to launch the CI pipelines

check-ci-infrastructure:
  stage: ci-infrastructure-check
  tags:
    - datafed-infrastructure
  script:
    - |
      BUILD_INFRASTRUCTURE="FALSE"
      COMPUTE_INSTANCE_NAMES=("ci-datafed-arangodb" "ci-datafed-core" "ci-datafed-globus2" "ci-datafed-client")
      for INSTANCE_NAME in "${COMPUTE_INSTANCE_NAMES[@]}"; do
        if ! ./scripts/ci_pipeline_setup.sh --compute-instance-name "$INSTANCE_NAME"; then
          BUILD_INFRASTRUCTURE="TRUE"
        fi
      done
      if [ "$BUILD_INFRASTRUCTURE" == "TRUE" ]
      then
        cp .gitlab/build_ci_infrastructure.yml ci_infrastructure.yml
      else
        cp .gitlab/skip_ci_infrastructure.yml ci_infrastructure.yml
      fi
  resource_group: infrastructure_build
  artifacts:
    paths:
      - ci_infrastructure.yml 

run-trigger-job:
  stage: trigger-infrastructure
  trigger:
    include:
      - artifact: ci_infrastructure.yml
        job: check-ci-infrastructure
    strategy: depend
  resource_group: infrastructure_build

################################################################################
# STAGE: signal
################################################################################
# Stage is used to separte the trigger job from the remaining jobs and to act
# as an anchor for setting up dependencies
signal:
  stage: signal
  tags:
    - runner
  script:
    - echo "Starting Build"
  rules:
    - exists:
      - check-ci-infrastrucure
    - exists:
      - run-trigger-job
    - when: on_success

################################################################################
# STAGE: clear-docker-cache
################################################################################
# Used to clear out the cache on VMs where the images are being built
clear-core-cache:
  stage: clear-docker-cache
  needs: ["signal"]
  tags:
    - ci_1
  script:
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker system prune -f
    - ./scripts/ci_purge_images.sh

clear-repo-cache:
  stage: clear-docker-cache
  needs: ["signal"]
  tags:
    - ci_3
  script:
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker system prune -f
    - ./scripts/ci_purge_images.sh

clear-python-client-cache:
  stage: clear-docker-cache
  variables:
    DATAFED_CI_PURGE_THRESHOLD: "10"
  needs: ["signal"]
  tags:
    - ci_5
  script:
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker system prune -f
    - ./scripts/ci_purge_images.sh

################################################################################
# STAGE: build-base
################################################################################
# build runtime and depedencies containers
#include:
#  - local: .gitlab/stage_build_base.yml
    #build-dependencies:
    #  stage: build-base
    #  variables:
    #    IMAGE_TAG: "datafed/dependencies"
    #    GIT_STRATEGY: clone
    #  tags:
    #    - docker
    #  script:
    #    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    #    - docker system prune -f
    #    - docker build -f docker/Dockerfile.dependencies -t "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest" .
    #    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    #    - docker push "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"
    #
    #build-runtime:
    #  stage: build-base
    #  variables:
    #    IMAGE_TAG: "datafed/runtime"
    #    GIT_STRATEGY: clone
    #  tags:
    #    - docker
    #  script:
    #    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    #    - docker system prune -f
    #    - docker build -f docker/Dockerfile.runtime -t "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest" .
    #    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    #    - docker push "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"

#################################################################################
## STAGE: provision client
#################################################################################
provision-client:
  needs: ["signal"]
  variables:
    GIT_STRATEGY: clone
  stage: provision-client
  tags:
    - ci-datafed-client
  before_script:
    - export PATH=/opt/datafed/dependencies/bin:$PATH
  script:
    - ./scripts/generate_datafed.sh
    - ./scripts/install_client_dependencies.sh
      #  rules:
      #    - changes:
      #        - scripts/generate_datafed.sh
      #        - scripts/install_client_dependencies.sh
      #        - scripts/dependency_install_functions.sh
      #        - scripts/dependency_versions.sh

################################################################################
# STAGE: image-check
################################################################################
# This stage is needed to determine if the images exist in the registry and 
# if they don't always be sure to build the image.
#
#check-ws-image:
#  stage: image-check
#  variables:
#    IMAGE_TAG: "datafed/ws"
#  tags:
#    - docker
#  script:
#    - |
#      BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
#      docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
#      FORCE_BUILD_WS="FALSE"
#      set +e
#      docker pull --quiet "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"
#      if [ $? -eq 0 ]; then echo "Image exists"; else FORCE_BUILD_WS="TRUE"; fi;
#      set -e
#      if [ "$FORCE_BUILD_WS" == "TRUE" ]
#      then
#        cp .gitlab/force_build_ws_image.yml ws_image.yml
#      else
#        cp .gitlab/build_ws_image.yml ws_image.yml
#      fi
#      echo "REGISTRY=${REGISTRY}" >> build.env
#      echo "HARBOR_USER=${HARBOR_USER}" >> build.env
#      echo "HARBOR_DATAFED_GITLAB_CI_REGISTRY=${HARBOR_DATAFED_GITLAB_CI_REGISTRY}" >> build.env
#      sed -i 's/\(HARBOR_USER=.*\)\$/\1$$/g' build.env
#  artifacts:
#    paths:
#      - ws_image.yml 
#    reports:
#      dotenv: build.env

      #check-core-image:
      #  stage: image-check
      #  variables:
      #    IMAGE_TAG: "datafed/core"
      #  tags:
      #    - docker
      #  script:
      #    - |
      #      BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
      #      docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
      #      FORCE_BUILD_CORE="FALSE"
      #      set +e
      #      docker pull --quiet "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"
      #      if [ $? -eq 0 ]; then echo "Image exists"; else FORCE_BUILD_CORE="TRUE"; fi;
      #      set -e
      #      if [ "$FORCE_BUILD_CORE" == "TRUE" ]
      #      then
      #        cp .gitlab/force_build_core_image.yml core_image.yml
      #      else
      #        cp .gitlab/build_core_image.yml core_image.yml
      #      fi
      #      echo "REGISTRY=${REGISTRY}" >> build.env
      #      echo "HARBOR_USER=${HARBOR_USER}" >> build.env
      #      echo "HARBOR_DATAFED_GITLAB_CI_REGISTRY=${HARBOR_DATAFED_GITLAB_CI_REGISTRY}" >> build.env
      #      sed -i 's/\(HARBOR_USER=.*\)\$/\1$$/g' build.env
      #  artifacts:
      #    paths:
      #      - core_image.yml 
      #    reports:
      #      dotenv: build.env

        #check-repo-image:
        #  stage: image-check
        #  variables:
        #    IMAGE_TAG: "datafed/repo"
        #  tags:
        #    - docker
        #  script:
        #    - |
        #      BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
        #      docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
        #      FORCE_BUILD_REPO="FALSE"
        #      set +e
        #      docker pull --quiet "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"
        #      if [ $? -eq 0 ]; then echo "Image exists"; else FORCE_BUILD_REPO="TRUE"; fi;
        #      set -e
        #      if [ "$FORCE_BUILD_REPO" == "TRUE" ]
        #      then
        #        cp .gitlab/force_build_repo_image.yml repo_image.yml
        #      else
        #        cp .gitlab/build_repo_image.yml repo_image.yml
        #      fi
        #      echo "REGISTRY=${REGISTRY}" >> build.env
        #      echo "HARBOR_USER=${HARBOR_USER}" >> build.env
        #      echo "HARBOR_DATAFED_GITLAB_CI_REGISTRY=${HARBOR_DATAFED_GITLAB_CI_REGISTRY}" >> build.env
        #      sed -i 's/\(HARBOR_USER=.*\)\$/\1$$/g' build.env
        #  artifacts:
        #    paths:
        #      - repo_image.yml 
        #    reports:
        #      dotenv: build.env

        #check-gcs-base-image:
        #  stage: image-check
        #  variables:
        #    IMAGE_TAG: "datafed/gcs-base"
        #  tags:
        #    - docker
        #  script:
        #    - |
        #      BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
        #      docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
        #      FORCE_BUILD_GCS_BASE="FALSE"
        #      set +e
        #      docker pull --quiet "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"
        #      if [ $? -eq 0 ]; then echo "Image exists"; else FORCE_BUILD_GCS_BASE="TRUE"; fi;
        #      set -e
        #      if [ "$FORCE_BUILD_GCS_BASE" == "TRUE" ]
        #      then
        #        cp .gitlab/force_build_gcs_base_image.yml gcs_base_image.yml
        #      else
        #        cp .gitlab/build_gcs_base_image.yml gcs_base_image.yml
        #      fi
        #      echo "REGISTRY=${REGISTRY}" >> build.env
        #      echo "HARBOR_USER=${HARBOR_USER}" >> build.env
        #      echo "HARBOR_DATAFED_GITLAB_CI_REGISTRY=${HARBOR_DATAFED_GITLAB_CI_REGISTRY}" >> build.env
        #      echo "DATAFED_GCS_SUBMODULE_VERSION=${DATAFED_GCS_SUBMODULE_VERSION}" >> build.env
        #      sed -i 's/\(HARBOR_USER=.*\)\$/\1$$/g' build.env
        #  artifacts:
        #    paths:
        #      - gcs_base_image.yml 
        #    reports:
        #      dotenv: build.env
        #
        #check-gcs-image:
        #  stage: image-check
        #  variables:
        #    IMAGE_TAG: "datafed/gcs"
        #  tags:
        #    - docker
        #  script:
        #    - |
        #      BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
        #      docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
        #      FORCE_BUILD_GCS="FALSE"
        #      set +e
        #      docker pull --quiet "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"
        #      if [ $? -eq 0 ]; then echo "Image exists"; else FORCE_BUILD_GCS="TRUE"; fi;
        #      set -e
        #      if [ "$FORCE_BUILD_GCS" == "TRUE" ]
        #      then
        #        cp .gitlab/force_build_gcs_image.yml gcs_image.yml
        #      else
        #        cp .gitlab/build_gcs_image.yml gcs_image.yml
        #      fi
        #      echo "REGISTRY=${REGISTRY}" >> build.env
        #      echo "HARBOR_USER=${HARBOR_USER}" >> build.env
        #      echo "HARBOR_DATAFED_GITLAB_CI_REGISTRY=${HARBOR_DATAFED_GITLAB_CI_REGISTRY}" >> build.env
        #      sed -i 's/\(HARBOR_USER=.*\)\$/\1$$/g' build.env
        #  artifacts:
        #    paths:
        #      - gcs_image.yml 
        #    reports:
        #      dotenv: build.env
        #
        #check-foxx-image:
        #  stage: image-check
        #  variables:
        #    IMAGE_TAG: "datafed/foxx"
        #  tags:
        #    - docker
        #  script:
        #    - |
        #      BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
        #      docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
        #      FORCE_BUILD_FOXX="FALSE"
        #      set +e
        #      docker pull --quiet "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"
        #      if [ $? -eq 0 ]; then echo "Image exists"; else FORCE_BUILD_FOXX="TRUE"; fi;
        #      set -e
        #      if [ "$FORCE_BUILD_FOXX" == "TRUE" ]
        #      then
        #        cp .gitlab/force_build_foxx_image.yml foxx_image.yml
        #      else
        #        cp .gitlab/build_foxx_image.yml foxx_image.yml
        #      fi
        #      echo "REGISTRY=${REGISTRY}" >> build.env
        #      echo "HARBOR_USER=${HARBOR_USER}" >> build.env
        #      echo "HARBOR_DATAFED_GITLAB_CI_REGISTRY=${HARBOR_DATAFED_GITLAB_CI_REGISTRY}" >> build.env
        #      sed -i 's/\(HARBOR_USER=.*\)\$/\1$$/g' build.env
        #  artifacts:
        #    paths:
        #      - foxx_image.yml 
        #    reports:
        #      dotenv: build.env

        #build-python-client-base:
        #  needs: ["clear-python-client-cache"]
        #  variables:
        #    IMAGE_TAG: "datafed/python-client-base"
        #    GIT_STRATEGY: clone
        #  stage: build
        #  tags:
        #    - docker
        #    - ci-datafed-client
        #  script:
        #    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
        #    - docker system prune -f
        #    - docker build -f python/docker/Dockerfile.python-client-base.ubuntu -t "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest" .
        #    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
        #    - docker push "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"
        #
        #
        ## Build foxx

################################################################################
# STAGE: build
################################################################################
# Building containers for running services
#include:
#  - local: .gitlab/stage_build.yml
#include:
#run-ws-build-job:
#  needs:
#    - job: build-dependencies
#    - job: build-runtime
#    - job: check-ws-image
#      artifacts: true
#  stage: build
#  trigger:
#    include:
#      - artifact: ws_image.yml
#        job: check-ws-image
#    strategy: depend
#  variables:
#    REGISTRY: "${REGISTRY}"
#    HARBOR_USER: "${HARBOR_USER}"
#    HARBOR_DATAFED_GITLAB_CI_REGISTRY: "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"

    #run-core-build-job:
    #  needs:
    #    - job: build-dependencies
    #    - job: build-runtime
    #    - job: check-core-image
    #      artifacts: true
    #  stage: build
    #  trigger:
    #    include:
    #      - artifact: core_image.yml
    #        job: check-core-image
    #    strategy: depend
    #  variables:
    #    REGISTRY: "${REGISTRY}"
    #    HARBOR_USER: "${HARBOR_USER}"
    #    HARBOR_DATAFED_GITLAB_CI_REGISTRY: "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"

#run-repo-build-job:
#  needs:
#    - job: build-dependencies
#    - job: build-runtime
#    - job: check-repo-image
#      artifacts: true
#  stage: build
#  trigger:
#    include:
#      - artifact: repo_image.yml
#        job: check-repo-image
#    strategy: depend
#  variables:
#    REGISTRY: "${REGISTRY}"
#    HARBOR_USER: "${HARBOR_USER}"
#    HARBOR_DATAFED_GITLAB_CI_REGISTRY: "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
#
#run-gcs-base-build-job:
#  needs:
#    - job: build-dependencies
#    - job: build-runtime
#    - job: check-gcs-base-image
#      artifacts: true
#  stage: build
#  trigger:
#    include:
#      - artifact: gcs_base_image.yml
#        job: check-gcs-base-image
#    strategy: depend
#  variables:
#    REGISTRY: "${REGISTRY}"
#    HARBOR_USER: "${HARBOR_USER}"
#    HARBOR_DATAFED_GITLAB_CI_REGISTRY: "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
#    DATAFED_GCS_SUBMODULE_VERSION: "${DATAFED_GCS_SUBMODULE_VERSION}"
#
#run-gcs-build-job:
#  needs:
#    - job: build-dependencies
#    - job: build-runtime
#    - job: run-gcs-base-build-job
#    - job: check-gcs-image
#      artifacts: true
#  stage: build
#  trigger:
#    include:
#      - artifact: gcs_image.yml
#        job: check-gcs-image
#    strategy: depend
#  variables:
#    REGISTRY: "${REGISTRY}"
#    HARBOR_USER: "${HARBOR_USER}"
#    HARBOR_DATAFED_GITLAB_CI_REGISTRY: "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
#
#run-foxx-build-job:
#  needs:
#    - job: build-dependencies
#    - job: build-runtime
#    - job: check-foxx-image
#      artifacts: true
#  stage: build
#  trigger:
#    include:
#      - artifact: foxx_image.yml
#        job: check-foxx-image
#    strategy: depend
#  variables:
#    REGISTRY: "${REGISTRY}"
#    HARBOR_USER: "${HARBOR_USER}"
#    HARBOR_DATAFED_GITLAB_CI_REGISTRY: "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"



      #build-python-client-base:
      #  needs: ["clear-python-client-cache"]
      #  variables:
      #    IMAGE_TAG: "datafed/python-client-base"
      #    GIT_STRATEGY: clone
      #  stage: build
      #  tags:
      #    - docker
      #    - ci-datafed-client
      #  script:
      #    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
      #    - docker system prune -f
      #    - docker build -f python/docker/Dockerfile.python-client-base.ubuntu -t "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest" .
      #    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
      #    - docker push "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"


