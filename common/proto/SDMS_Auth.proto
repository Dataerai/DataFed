// ALERT: If messages in this proto file are ADDED or REMOVED, or if the
// definitions of existing message fields are CHANGED, then the VER_PROTO_MAJOR
// enum value in Version.proto must be incremented and backward compatability
// will be lost. If fields are APPENDED to the end of existing message
// defintions, then VER_PROTO_MINOR must be incremented and backward
// compatability will be maintained. Unused messages and parameters should be
// marked as deprecated, and these should be removed at the next major version
// change.

// NOTE: All messages in this protobuf file require an authorized client and will
// be rejected without processing if otherwise.

syntax = "proto2";

import "SDMS.proto";

package SDMS.Auth;

enum Protocol
{
    ID = 2;
}


// ============================================================================
// ----------- Setup/Config Messages ------------------------------------------
// ============================================================================

// Request core server to generate/retrieve user security credentials
// Reply: GenerateCredentialsReply on success, NackReply on error
message GenerateCredentialsRequest
{
    optional string             domain      = 1; // Reserved for future use (Facility/org domain)
    optional uint32             uid         = 2; // Reserved for future use (POSIX uid)
}

// Request core server to revoke (clear) user security credentials for the sending user
// This will prevent non-interactive login from ALL installed clients for the sending user
// Reply: AckReply on success, NackReply on error
message RevokeCredentialsRequest
{
}

// Reply containing user security credentials (ZeroMQ keys) that can be used for non-interactive login
// Note: these keys must be stored securely
message GenerateCredentialsReply
{
    required string             pub_key     = 1; // Public key
    required string             priv_key    = 2; // Private key
}


// ============================================================================
// ----------- Permissions Messages -------------------------------------------
// ============================================================================

// Check if specified permission are granted on given resource
// Reply: CheckPermsReply on success, NackReply on error
message CheckPermsRequest
{
    required string             id          = 1; // Record, collection, or project ID
    required uint32             perms       = 2; // Requested access permissions
}

// Reply indicating if all requested permissions are granted
message CheckPermsReply
{
    required bool               granted     = 1; // True if all permission granted, false otherwise
}

// Request current user access permissions for given resource
// Reply: GetPermsReply on success, NackReply on error
message GetPermsRequest
{
    required string             id          = 1; // Record, collection, or project ID
    optional uint32             perms       = 2; // Optional bitmask for permissions to check, gets all if not given
}

// Reply containing granted permissions for given user/resource
// If perms bitmask was specified, granted will only apply to requested permissions
message GetPermsReply
{
    required uint32             granted     = 1;
}


// ============================================================================
// ----------- User Messages --------------------------------------------------
// ============================================================================

// Set user access tokens (from Globus OAuth). This message must be called
// whenever a user logsin via Globus (web portal) in order to update the access
// and refresh tokens issued by Globus.
// Reply: AckReply on success, NackReply on error
message UserSetAccessTokenRequest
{
    required string             access      = 1; // Access token
    required uint32             expires_in  = 2; // Access expiration time in seconds
    required string             refresh     = 3; // Refresh token (never expires)
}

// Get user access token (from Globus OAuth). This token will allow client to
// access Globus APIs on behalf of the authenticated user.
// Reply: UserAccessTokenReply on success, NackReply on error
message UserGetAccessTokenRequest
{
}

// Reply containing the user Globus access token and expiration time (in
// seconds) for authenticated user.
message UserAccessTokenReply
{
    required string             access      = 1; // Globus access token
    required uint32             expires_in  = 2; // Access token expiration in seconds
}

// Request to create a new DataFed user account.
// Reply: AckReply on success, NackReply on error
message UserCreateRequest
{
    required string             uid         = 1; // User's GlobusID UID (name portion only)
    optional string             password    = 2; // User-specified DataFed CLI password
    required string             name        = 3; // Full name as given by Globus
    required string             email       = 4; // Email address
    repeated string             uuid        = 5; // UUID for primary Globus account
    optional string             options     = 6; // DataFed options (JSON string)
}

// Request to find DataFed user by one or more Globus UUIDs
// Reply: UserDataReply on success, NackReply on failure
message UserFindByUUIDsRequest
{
    repeated string             uuid        = 1; // An identity UUID linked to user's Globus account
}

// Request to find users matching partial name/UID string (ngram search)
// Reply: UserDataReply on success, NackReply on failure
message UserFindByNameUIDRequest
{
    required string             name_uid    = 1; // String with full/partial name or UID to search for
    optional uint32             offset      = 2; // Optional result offset
    optional uint32             count       = 3; // Optional result count
}

// Request to update a user record
// Reply: UserDataReply on success, NackReply on failure
message UserUpdateRequest
{
    required string             uid         = 1; // DataFed UID of user record to update
    optional string             email       = 2; // Optional new email address
    optional string             password    = 3; // Optional new DataFed password
    optional string             options     = 4; // Optional DataFed options (JSON string)
}

// Request to list all registered users
// Reply: UserDataReply on success, NackReply on failure
message UserListAllRequest
{
    optional uint32             offset      = 1; // Optional result offset
    optional uint32             count       = 2; // Optional result count
}

// Request to list all users that are collaborators of auth user
// Collaborators are users on same project(s) and/or with ACLs set to/from auth user
// Reply: UserDataReply on success, NackReply on failure
message UserListCollabRequest
{
    optional uint32             offset      = 1; // Optional result offset
    optional uint32             count       = 2; // Optional result count
}

// Request to get the list of recent Globus endpoints used by auth user
// Reply: UserGetRecentEPReply on success, NackReply on failure
message UserGetRecentEPRequest
{
}

// Reply with list of recent Globus endpoints used by auth user
message UserGetRecentEPReply
{
    repeated string             ep          = 1; // Endpoint ID (legacy not UUID)
}

// Request to set the list of recent Globus endpoints used by auth user
// This request will replace the stored endpoint list with the one provided
// Reply: AckReply on success, NackReply on error
message UserSetRecentEPRequest
{
    repeated string             ep          = 1; // Endpoint ID (legacy not UUID)
}


// ============================================================================
// ----------- General Data/Collection Messages -------------------------------
// ============================================================================

message ListingReply
{
    repeated ListingData        item        = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
    optional uint32             total       = 4;
}


// ============================================================================
// ----------- Data Record Messages -------------------------------------------
// ============================================================================

// Deprecated
message RecordListRequest
{
    optional string             subject     = 1;
    optional bool               pub         = 2;
}

// Request to list all records associated with a given repository and user/subject.
// If the subject is provided sufficient priveleges are required.
// Reply: ListingReply on success, NackReply on error
message RecordListByAllocRequest
{
    required string             repo        = 1; // Repository ID
    optional string             subject     = 2; // Optional project or user ID
    optional uint32             offset      = 3; // Optional result offset
    optional uint32             count       = 4; // Optional result count
}

// Request to view a data record. Requires READ_REC permissions. Metadata will be
// returned if client has READ_META permission.
// Reply: RecordDataReply on success, NackReply on error
message RecordViewRequest
{
    required string             id          = 1; // Record ID or alias
    optional bool               details     = 2; // Reserved for future use
}

// Reply containing details of one or more data records in response to original
// request. If original request resulted in side effects, impacted records will
// be listed in the update field. This is an optimization to reduce latency for
// grpahical clients that may be displaying multiple/many records that need to
// be refreshed as a result of the original request.
message RecordDataReply
{
    repeated SDMS.RecordData    data        = 1; // Record details
    repeated SDMS.ListingData   update      = 2; // Optional list of records impacted by side effects
}

// Request to create a new data record.
// Reply: RecordDataReply on success, NackReply on error
message RecordCreateRequest
{
    optional string             title       = 1; // Record title (required)
    optional string             desc        = 2; // Optional description (markdown supported)
    repeated string             tags        = 3; // Optional list of tags
    optional string             alias       = 4; // Optional alias
    optional string             metadata    = 5; // Optional metadata (JSON string)
    optional string             parent_id   = 6; // Optional parent collection ID or alias (default is root)
    optional bool               external    = 7; // Optional flag for external (unmanaged) raw data
    optional string             source      = 8; // Optional raw data source Globus path
    optional string             repo_id     = 9; // Optional repository ID (default for user/project used if omitted)
    optional string             ext         = 10; // Optional record extension
    optional bool               ext_auto    = 11; // Optional flag for automatic extension (based on source file)
    repeated DependencySpecData deps        = 12; // Optional record dependencies
    optional string             sch_id      = 13; // Optional metadata schema ID
    optional bool               sch_enforce = 14; // Optional flag to enforce schema validation (fails on non-compliance)
}

// Request to create data records in batch. This message will be deprecated.
// Reply: RecordDataReply on success, NackReply on error
message RecordCreateBatchRequest
{
    required string             records     = 1; // JSON array containing records following DB record create schema
}

// Request to update an existing data record.
// Reply: RecordDataReply on success, NackReply on error
message RecordUpdateRequest
{
    required string             id          = 1; // Record ID or alias
    optional string             title       = 2; // Optional title
    optional string             desc        = 3; // Optional description (markdown supported)
    repeated string             tags        = 4; // Optional list of tags to add
    optional bool               tags_clear  = 5; // Optional flag to clear existing tags
    optional string             alias       = 6; // Optional alias
    optional string             metadata    = 7; // Optional metadata (JSON string)
    optional bool               mdset       = 8; // Optional flag to set (replace) metadata if true, or merge if false
    optional string             sch_id      = 9; // Optional metadata schema ID
    optional bool               sch_enforce = 10; // Optional flag to enforce schema validation (fails on non-compliance)
    optional string             source      = 11; // Optional raw data source Globus path
    optional string             ext         = 12; // Optional record extension
    optional bool               ext_auto    = 13; // Optional flag for automatic extension (based on source file)
    //optional uint64             size        = 14;
    //optional uint32             dt          = 15;
    repeated DependencySpecData dep_add     = 16; // Optional new dependencies to add
    repeated DependencySpecData dep_rem     = 17; // Optional existing dependencies to remove
}

message RecordUpdateBatchRequest
{
    required string             records     = 1; // JSON array containing records following DB record update schema
}

message RecordExportRequest
{
    repeated string             id          = 1;
}

message RecordExportReply
{
    repeated string             record      = 1;
}

message RecordLockRequest
{
    repeated string             id          = 1;
    required bool               lock        = 2;
}

message RecordDeleteRequest
{
    repeated string             id          = 1;
}

message RecordGetDependencyGraphRequest
{
    required string             id          = 1;
}

message RecordAllocChangeRequest
{
    repeated string             id          = 1;
    required string             repo_id     = 2;
    optional string             proj_id     = 3;
    optional bool               check       = 4;
}

message RecordAllocChangeReply
{
    required uint32             act_cnt     = 1;
    required uint64             act_size    = 2;
    required uint32             tot_cnt     = 3;
    required uint64             data_limit  = 4;
    required uint64             data_size   = 5;
    required uint32             rec_limit   = 6;
    required uint32             rec_count   = 7;
    optional SDMS.TaskData      task        = 8;
}

message RecordOwnerChangeRequest
{
    repeated string             id          = 1;
    required string             coll_id     = 2;
    optional string             repo_id     = 3;
    optional string             proj_id     = 4;
    optional bool               check       = 5;
}

message RecordOwnerChangeReply
{
    required uint32             act_cnt     = 1;
    required uint64             act_size    = 2;
    required uint32             tot_cnt     = 3;
    repeated AllocData          alloc       = 4;
    optional SDMS.TaskData      task        = 8;
}


// ============================================================================
// ----------- Raw Data Messages ----------------------------------------------
// ============================================================================

message HttpXfrDataReply
{
    repeated SDMS.HttpXfrData   xfr         = 1;
}

// Download raw data for one or more records
message DataGetRequest
{
    repeated string             id          = 1;
    optional string             path        = 2;
    optional Encryption         encrypt     = 3;
    optional bool               orig_fname  = 4;
    optional bool               check       = 5;
}

// Upload raw data for one record
message DataPutRequest
{
    required string             id          = 1;
    optional string             path        = 2;
    optional Encryption         encrypt     = 3;
    optional string             ext         = 4;
    optional bool               check       = 5;
}

message DataGetReply
{
    repeated ListingData        item        = 1;
    optional SDMS.TaskData      task        = 2;
}

message DataPutReply
{
    required RecordData         item        = 1;
    optional SDMS.TaskData      task        = 2;
}

// Delete raw data only (not record)
message DataDeleteRequest
{
    repeated string             id          = 1;
}

// Get domain-local path to raw data of a record (for direct access)
message DataPathRequest
{
    required string             id          = 1;
    required string             domain      = 2;
}

message DataPathReply
{
    required string             path        = 1;
}


// ============================================================================
// ----------- Search Messages ------------------------------------------------
// ============================================================================

// Returns ListingReply
message SearchRequest
{
    required SDMS.SearchMode    mode        = 1;
    optional bool               published   = 2;

    // Data and Collections
    optional string             id          = 3;
    optional string             text        = 4;
    repeated string             tags        = 5;
    repeated string             cat_tags    = 6;
    optional uint32             from        = 7;
    optional uint32             to          = 8;
    optional string             owner       = 9; 
    optional string             creator     = 10;
    repeated string             coll        = 11;

    // Data scope only
    optional string             sch_id      = 12;
    optional string             meta        = 13;
    optional bool               meta_err    = 14;

    optional SDMS.SortOption    sort        = 15;
    optional bool               sort_rev    = 16;
    optional uint32             offset      = 17;
    optional uint32             count       = 18;
}


// ============================================================================
// ----------- Collection Messages --------------------------------------------
// ============================================================================

message CollViewRequest
{
    required string             id          = 1;
}

message CollDataReply
{
    repeated SDMS.CollData      coll        = 1;
    repeated SDMS.ListingData   update      = 2;    
}

// Returns ListingReply
message CollReadRequest
{
    required string             id          = 1;
    optional bool               details     = 3;
    optional uint32             offset      = 4;
    optional uint32             count       = 5;
}

message CollCreateRequest
{
    optional string             title       = 1;
    optional string             desc        = 2;
    optional string             alias       = 3;
    optional string             parent_id   = 4;
    optional string             topic       = 6;
    repeated string             tags        = 7;
}

message CollUpdateRequest
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    optional string             alias       = 4;
    optional string             topic       = 6;
    repeated string             tags        = 7;
    optional bool               tags_clear  = 8;
}

message CollDeleteRequest
{
    repeated string             id          = 1;
}

message CollListRequest
{
    optional string             user        = 1;
    optional bool               details     = 2;
    optional uint32             offset      = 3;
    optional uint32             count       = 4;
}

message CollWriteRequest
{
    required string             id          = 1;
    repeated string             add         = 2;
    repeated string             rem         = 3;
    optional bool               rem_all     = 4;
}

message CollMoveRequest
{
    required string             src_id      = 1;
    required string             dst_id      = 2;
    repeated string             item        = 3;
}

message CollGetParentsRequest
{
    required string             id          = 1;
    optional bool               inclusive   = 2;
}

message CollPathReply
{
    repeated SDMS.PathData      path        = 1;
}

message CollGetOffsetRequest
{
    required string             id          = 1;
    required string             item        = 2;
    required uint32             page_sz     = 3;
}

message CollGetOffsetReply
{
    required string             id          = 1;
    required string             item        = 2;
    required uint32             offset      = 3;
}

message CollListPublishedRequest
{
    optional string             subject     = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
}


// ============================================================================
// ----------- Group Messages -------------------------------------------------
// ============================================================================

message GroupCreateRequest
{
    required SDMS.GroupData     group       = 1;
}

message GroupUpdateRequest
{
    required string             uid         = 1;
    required string             gid         = 2;
    optional string             title       = 3;
    optional string             desc        = 4;
    repeated string             add_uid     = 5;
    repeated string             rem_uid     = 6;
}

message GroupDataReply
{
    repeated SDMS.GroupData     group       = 1;
}

message GroupDeleteRequest
{
    required string             uid         = 1;
    required string             gid         = 2;
}

message GroupListRequest
{
    required string             uid         = 1;
}

message GroupViewRequest
{
    required string             uid         = 1;
    required string             gid         = 2;
}


// ============================================================================
// ----------- ACL Messages ---------------------------------------------------
// ============================================================================

message ACLViewRequest
{
    required string             id          = 1;
}

message ACLUpdateRequest
{
    required string             id          = 1;
    optional string             rules       = 2;
}

// List users/projects owning any ACLs set for client or subject (user or project)
// Returns ListingReply
message ACLBySubjectRequest
{
    optional string             subject         = 1;
    optional bool               inc_users       = 2;
    optional bool               inc_projects    = 3;
}

// List top-level ACLs set by owner for client or subject (user or project)
// Returns ListingReply
message ACLListItemsBySubjectRequest
{
    optional string             subject     = 1;
    required string             owner       = 2;
}

message ACLDataReply
{
    repeated ACLRule            rule        = 1;
}


// ============================================================================
// ----------- Project Messages -----------------------------------------------
// ============================================================================

message ProjectViewRequest
{
    required string             id          = 1;
}

message ProjectDataReply
{
    repeated ProjectData        proj        = 1;
}

message ProjectCreateRequest
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    repeated string             admin       = 4;
    repeated string             member      = 5;
}

message ProjectUpdateRequest
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    optional bool               admin_set   = 4 [default = false];
    repeated string             admin       = 5;
    optional bool               member_set  = 6 [default = false];
    repeated string             member      = 7;
}

message ProjectDeleteRequest
{
    repeated string             id          = 1;
}

message ProjectListRequest
{
    optional string             subject     = 1;
    optional bool               as_owner    = 2;
    optional bool               as_admin    = 3;
    optional bool               as_member   = 4;
    optional SortOption         sort        = 5;
    optional bool               sort_rev    = 6;
    optional uint32             offset      = 7;
    optional uint32             count       = 8;
}

message ProjectSearchRequest
{
    required string             text_query  = 1;
    repeated string             scope       = 2;
}

message ProjectGetRoleRequest
{
    required string             id          = 1;
    optional string             subject     = 2;
}

message ProjectGetRoleReply
{
    required ProjectRole        role        = 1;
}


// ============================================================================
// ----------- Repository Messages --------------------------------------------
// ============================================================================

message RepoDataDeleteRequest
{
    repeated RecordDataLocation loc         = 1;
}

message RepoDataGetSizeRequest
{
    repeated RecordDataLocation loc         = 1;
}

message RepoDataSizeReply
{
    repeated RecordDataSize     size        = 1;
}

message RepoPathCreateRequest
{
    required string             path        = 1;
}

message RepoPathDeleteRequest
{
    required string             path        = 1;
}

message RepoListRequest
{
    optional bool               details     = 1;
    optional bool               all         = 2;
}

message RepoViewRequest
{
    required string             id          = 1;
}

message RepoCreateRequest
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             desc        = 3;
    optional string             domain      = 5;
    required string             path        = 6;
    optional string             exp_path    = 7;
    required string             address     = 8;
    required string             endpoint    = 9;
    required string             pub_key     = 10;
    required uint64             capacity    = 11;
    repeated string             admin       = 12;
}

message RepoUpdateRequest
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    optional string             domain      = 5;
    optional string             path        = 6;
    optional string             exp_path    = 7;
    optional string             address     = 8;
    optional string             endpoint    = 9;
    optional string             pub_key     = 10;
    optional uint64             capacity    = 11;
    repeated string             admin       = 12;
}

message RepoDeleteRequest
{
    required string             id          = 1;
}

message RepoDataReply
{
    repeated SDMS.RepoData      repo        = 1;
}

message RepoCalcSizeRequest
{
    required bool               recurse     = 1;
    repeated string             item        = 2;
}

message RepoCalcSizeReply
{
    repeated AllocStatsData     stats       = 1;
}

message RepoListAllocationsRequest
{
    required string             id          = 1;
}

message RepoListSubjectAllocationsRequest
{
    optional string             subject     = 1;
    optional bool               stats       = 2;
}

message RepoListObjectAllocationsRequest
{
    required string             id          = 1;
}

message RepoViewAllocationRequest
{
    required string             repo        = 1;
    required string             subject     = 2;
}

message RepoAllocationsReply
{
    repeated AllocData          alloc       = 1;
}

message RepoAllocationStatsRequest
{
    required string             repo        = 1;
    optional string             subject     = 2;
}

message RepoAllocationStatsReply
{
    required AllocStatsData     alloc       = 1;
}

// Reply is ACK/NACK
message RepoAllocationCreateRequest
{
    required string             repo        = 1;
    required string             subject     = 2;
    required uint64             data_limit  = 3;
    required uint32             rec_limit   = 4;
}

// Reply is ACK/NACK
message RepoAllocationSetRequest
{
    required string             repo        = 1;
    required string             subject     = 2;
    required uint64             data_limit  = 3;
    required uint32             rec_limit   = 4;
}

// Reply is ACK/NACK
message RepoAllocationSetDefaultRequest
{
    required string             repo        = 1;
    optional string             subject     = 2;
}

// Reply is ACK/NACK
message RepoAllocationDeleteRequest
{
    required string             repo        = 1;
    required string             subject     = 2;
}

// Reply is ACK/NACK
message RepoAuthzRequest
{
    required string             repo        = 1;
    required string             client      = 2;
    required string             file        = 3;
    required string             action      = 4;
}

// ============================ Topic Messages (Deprecated)

// Deprecated
message TopicLinkRequest
{
    required string             topic       = 1;
    required string             id          = 2;
}

// Deprecated
message TopicUnlinkRequest
{
    required string             topic       = 1;
    required string             id          = 2;
}

// ============================================================================
// ----------- Saved Query Messages -------------------------------------------
// ============================================================================

message QueryCreateRequest
{
    required string             title       = 1;
    required SearchRequest      query       = 2;
}

message QueryUpdateRequest
{
    required string             id          = 1;
    optional string             title       = 2;
    optional SearchRequest      query       = 3;
}

message QueryDeleteRequest
{
    repeated string             id          = 1;
}

message QueryListRequest
{
    optional uint32             offset      = 1;
    optional uint32             count       = 2;
}

message QueryViewRequest
{
    required string             id          = 1;
}

message QueryExecRequest
{
    required string             id          = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
}

message QueryDataReply
{
    required string             id          = 1;
    required string             title       = 2;
    required string             owner       = 4;
    required uint32             ct          = 5;
    required uint32             ut          = 6;
    required SearchRequest      query       = 7;
    //repeated SDMS.QueryData     query       = 1;
}


// ============================================================================
// ----------- Annotation Messages --------------------------------------------
// ============================================================================

message AnnotationListBySubjectRequest
{
    required string             subject     = 1;
}

message AnnotationViewRequest
{
    required string             id          = 1;
}

message AnnotationDataReply
{
    repeated SDMS.NoteData      note    = 1;
    repeated SDMS.ListingData   update  = 2;
}

message AnnotationCreateRequest
{
    required SDMS.NoteType      type        = 1;
    required string             subject     = 2;
    required string             title       = 3;
    required string             comment     = 4;
    required bool               activate    = 5;
}

message AnnotationUpdateRequest
{
    required string             id          = 1;
    required string             comment     = 2;
    optional SDMS.NoteType      new_type    = 3;
    optional SDMS.NoteState     new_state   = 4;
    optional string             new_title   = 5;
}

message AnnotationCommentEditRequest
{
    required string             id          = 1;
    required uint32             comment_idx = 2;
    required string             comment     = 3;
}


// ============================================================================
// ----------- Task Messages --------------------------------------------------
// ============================================================================

message TaskViewRequest
{
    required string             task_id     = 1;
}

message TaskListRequest
{
    optional string             proj_id     = 1;
    optional uint32             since       = 2;
    optional uint32             from        = 3;
    optional uint32             to          = 4;
    repeated SDMS.TaskStatus    status      = 5;
    optional uint32             offset      = 6;
    optional uint32             count       = 7;
}

message TaskDataReply
{
    repeated SDMS.TaskData      task        = 1;
}


// ============================================================================
// ----------- Tag Messages ---------------------------------------------------
// ============================================================================

// Returns TagDataReply
message TagSearchRequest
{
    optional string             name        = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
}

// Returns TagDataReply
message TagListByCountRequest
{
    optional uint32             offset      = 1;
    optional uint32             count       = 2;
}

message TagDataReply
{
    repeated SDMS.TagData       tag         = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
    optional uint32             total       = 4;
}


// ============================================================================
// ----------- Schema / Validation Messages -----------------------------------
// ============================================================================

message MetadataValidateRequest
{
    required string             metadata    = 1;
    required string             sch_id      = 2;
}

message MetadataValidateReply
{
    optional string             errors      = 1;
}

message SchemaViewRequest
{
    required string             id          = 1;
    optional bool               resolve     = 2;
}

message SchemaSearchRequest
{
    optional string             id          = 1;
    optional string             text        = 2;
    optional string             owner       = 3;
    optional SDMS.SortOption    sort        = 4;
    optional bool               sort_rev    = 5;
    optional uint32             offset      = 6;
    optional uint32             count       = 7;
}

message SchemaDataReply
{
    repeated SDMS.SchemaData    schema      = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
    optional uint32             total       = 4;
}

message SchemaCreateRequest
{
    required string             id          = 1;
    required string             desc        = 2;
    required bool               pub         = 3;
    required bool               sys         = 4;
    required string             def         = 5;
}

message SchemaReviseRequest
{
    required string             id          = 1;
    optional string             desc        = 2;
    optional bool               pub         = 3;
    optional bool               sys         = 4;
    optional string             def         = 5;
}

message SchemaUpdateRequest
{
    required string             id          = 1;
    optional string             id_new      = 2;
    optional string             desc        = 3;
    optional bool               pub         = 4;
    optional bool               sys         = 5;
    optional string             def         = 6;
}

message SchemaDeleteRequest
{
    required string             id          = 1;
}


// ============================================================================
// ----------- Catalog / Topic Messages ---------------------------------------
// ============================================================================

// Returns TopicDataReply
message TopicListTopicsRequest
{
    optional string             topic_id    = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
}

// Returns TopicDataReply
message TopicViewRequest
{
    required string             id          = 1;
}

// Returns TopicDataReply
message TopicSearchRequest
{
    optional string             phrase      = 1;
}

message TopicDataReply
{
    repeated TopicData          topic       = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
    optional uint32             total       = 4;
}

