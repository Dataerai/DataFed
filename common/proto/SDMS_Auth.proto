// ALERT: If messages in this proto file are REORDERED or REMOVED, or if the
// definitions of existing message parameters are CHANGED, then the
// VER_PROTO_MAJOR enum value in Version.proto must be incremented and backward
// compatability will be lost. If new messages are APPENDED to the end of this
// file, or parameters are APPENDED to the end of an existing message defintion,
// then VER_PROTO_MINOR must be incremented and backward compatability will be
// maintained. Unused messages and parameters should be marked as deprecated,
// and these should be removed at the next major version change.

import "SDMS.proto";

package SDMS.Auth;

enum Protocol
{
    ID = 2;
}

// ============================ Setup/Config Messages

message GenerateCredentialsRequest
{
    optional string             domain      = 1;
    optional uint32             uid         = 2;
}

message RevokeCredentialsRequest
{
}

message GenerateCredentialsReply
{
    required string             pub_key     = 1;
    required string             priv_key    = 2;
}

// ============================ Permissions Messages

message CheckPermsRequest
{
    required string             id          = 1;
    required uint32             perms       = 2;
}

message CheckPermsReply
{
    required bool               granted     = 1;
}

message GetPermsRequest
{
    required string             id          = 1;
    optional uint32             perms       = 2;
}

message GetPermsReply
{
    required uint32             granted     = 1;
}

// ============================ User Messages

message UserSetAccessTokenRequest
{
    required string             access      = 1;
    required uint32             expires_in  = 2;
    required string             refresh     = 3;
}

message UserGetAccessTokenRequest
{
}

message UserAccessTokenReply
{
    required string             access      = 1;
    required uint32             expires_in  = 2;
}

message UserCreateRequest
{
    required string             uid         = 1;
    optional string             password    = 2;
    required string             name        = 3;
    required string             email       = 4;
    repeated string             uuid        = 5;
    optional string             options     = 6;
}


message UserFindByUUIDsRequest
{
    repeated string             uuid        = 1;
}

message UserFindByNameUIDRequest
{
    required string             name_uid    = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
}

message UserUpdateRequest
{
    required string             uid         = 1;
    optional string             email       = 2;
    optional string             password    = 3;
    optional string             options     = 4;
}

message UserListAllRequest
{
    optional uint32             offset      = 1;
    optional uint32             count       = 2;
}

message UserListCollabRequest
{
    optional uint32             offset      = 1;
    optional uint32             count       = 2;
}

message UserGetRecentEPRequest
{
}

message UserGetRecentEPReply
{
    repeated string             ep          = 1;
}

message UserSetRecentEPRequest
{
    repeated string             ep          = 1;
}

// ============================ General Data/Collection Messages

message ListingReply
{
    repeated ListingData        item        = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
    optional uint32             total       = 4;
}

// ============================ Data Record Messages

message RecordListRequest
{
    optional string             subject     = 1;
    optional bool               pub         = 2;
}

message RecordListByAllocRequest
{
    required string             repo        = 1;
    optional string             subject     = 2;
    optional uint32             offset      = 3;
    optional uint32             count       = 4;
}


message RecordViewRequest
{
    required string             id          = 1;
    optional bool               details     = 2;
}

message RecordDataReply
{
    repeated SDMS.RecordData    data        = 1;
    repeated SDMS.ListingData   update      = 2;
}

message RecordCreateRequest
{
    optional string             title       = 1;
    optional string             desc        = 2;
    repeated string             tags        = 3;
    optional string             alias       = 4;
    optional string             metadata    = 5;
    optional string             parent_id   = 6;
    optional bool               external    = 7;
    optional string             source      = 8;
    optional string             repo_id     = 9;
    optional string             ext         = 10;
    optional bool               ext_auto    = 11;
    repeated DependencySpecData deps        = 12;
    optional string             sch_id      = 13;
    optional bool               sch_enforce = 14;
}

message RecordCreateBatchRequest
{
    required string             records     = 1; // JSON array containing records following DB record create schema
}

message RecordUpdateRequest
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    repeated string             tags        = 4;
    optional bool               tags_clear  = 5;
    optional string             alias       = 6;
    optional string             metadata    = 7;
    optional bool               mdset       = 8;
    optional string             sch_id      = 9;
    optional bool               sch_enforce = 10;
    optional string             source      = 11;
    optional string             ext         = 12;
    optional bool               ext_auto    = 13;
    //optional uint64             size        = 14;
    //optional uint32             dt          = 15;
    repeated DependencySpecData dep_add     = 16;
    repeated DependencySpecData dep_rem     = 17;
}

message RecordUpdateBatchRequest
{
    required string             records     = 1; // JSON array containing records following DB record update schema
}

message RecordExportRequest
{
    repeated string             id          = 1;
}

message RecordExportReply
{
    repeated string             record      = 1;
}

message RecordLockRequest
{
    repeated string             id          = 1;
    required bool               lock        = 2;
}

message RecordDeleteRequest
{
    repeated string             id          = 1;
}

message RecordGetDependencyGraphRequest
{
    required string             id          = 1;
}

message RecordAllocChangeRequest
{
    repeated string             id          = 1;
    required string             repo_id     = 2;
    optional string             proj_id     = 3;
    optional bool               check       = 4;
}

message RecordAllocChangeReply
{
    required uint32             act_cnt     = 1;
    required uint64             act_size    = 2;
    required uint32             tot_cnt     = 3;
    required uint64             data_limit  = 4;
    required uint64             data_size   = 5;
    required uint32             rec_limit   = 6;
    required uint32             rec_count   = 7;
    optional SDMS.TaskData      task        = 8;
}

message RecordOwnerChangeRequest
{
    repeated string             id          = 1;
    required string             coll_id     = 2;
    optional string             repo_id     = 3;
    optional string             proj_id     = 4;
    optional bool               check       = 5;
}

message RecordOwnerChangeReply
{
    required uint32             act_cnt     = 1;
    required uint64             act_size    = 2;
    required uint32             tot_cnt     = 3;
    repeated AllocData          alloc       = 4;
    optional SDMS.TaskData      task        = 8;
}

// ============================ Raw Data Messages


message HttpXfrDataReply
{
    repeated SDMS.HttpXfrData   xfr         = 1;
}

// Download raw data for one or more records
message DataGetRequest
{
    repeated string             id          = 1;
    optional string             path        = 2;
    optional Encryption         encrypt     = 3;
    optional bool               orig_fname  = 4;
    optional bool               check       = 5;
}

// Upload raw data for one record
message DataPutRequest
{
    required string             id          = 1;
    optional string             path        = 2;
    optional Encryption         encrypt     = 3;
    optional string             ext         = 4;
    optional bool               check       = 5;
}

message DataGetReply
{
    repeated ListingData        item        = 1;
    optional SDMS.TaskData      task        = 2;
}

message DataPutReply
{
    required RecordData         item        = 1;
    optional SDMS.TaskData      task        = 2;
}

// Delete raw data only (not record)
message DataDeleteRequest
{
    repeated string             id          = 1;
}

// Get domain-local path to raw data of a record (for direct access)
message DataPathRequest
{
    required string             id          = 1;
    required string             domain      = 2;
}

message DataPathReply
{
    required string             path        = 1;
}

// ============================ Search Messages

// Returns ListingReply
message SearchRequest
{
    required SDMS.SearchMode    mode        = 1;
    required SDMS.SearchScope   scope       = 2;
    optional string             owner       = 3; // Required for all scopes except public

    // Data and Collections
    optional string             id          = 4;
    optional string             text        = 5;
    repeated string             tags        = 6;
    repeated string             cat_tags    = 7;
    optional uint32             from        = 8;
    optional uint32             to          = 9;
    optional string             creator     = 10;
    repeated string             coll        = 11;

    // Data scope only
    optional string             sch_id      = 12;
    optional string             meta        = 13;
    optional bool               meta_err    = 14;

    optional SDMS.SortOption    sort        = 15;
    optional bool               sort_rev    = 16;
    optional uint32             offset      = 17;
    optional uint32             count       = 18;
}

// ============================ Collection Messages

message CollViewRequest
{
    required string             id          = 1;
}

message CollDataReply
{
    repeated SDMS.CollData      coll        = 1;
    repeated SDMS.ListingData   update      = 2;    
}

// Returns ListingReply
message CollReadRequest
{
    required string             id          = 1;
    optional bool               details     = 3;
    optional uint32             offset      = 4;
    optional uint32             count       = 5;
}

message CollCreateRequest
{
    optional string             title       = 1;
    optional string             desc        = 2;
    optional string             alias       = 3;
    optional string             parent_id   = 4;
    optional string             topic       = 6;
    repeated string             tags        = 7;
}

message CollUpdateRequest
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    optional string             alias       = 4;
    optional string             topic       = 6;
    repeated string             tags        = 7;
    optional bool               tags_clear  = 8;
}

message CollDeleteRequest
{
    repeated string             id          = 1;
}

message CollListRequest
{
    optional string             user        = 1;
    optional bool               details     = 2;
    optional uint32             offset      = 3;
    optional uint32             count       = 4;
}

message CollWriteRequest
{
    required string             id          = 1;
    repeated string             add         = 2;
    repeated string             rem         = 3;
    optional bool               rem_all     = 4;
}

message CollMoveRequest
{
    required string             src_id      = 1;
    required string             dst_id      = 2;
    repeated string             item        = 3;
}

message CollGetParentsRequest
{
    required string             id          = 1;
    optional bool               inclusive   = 2;
}

message CollPathReply
{
    repeated SDMS.PathData      path        = 1;
}

message CollGetOffsetRequest
{
    required string             id          = 1;
    required string             item        = 2;
    required uint32             page_sz     = 3;
}

message CollGetOffsetReply
{
    required string             id          = 1;
    required string             item        = 2;
    required uint32             offset      = 3;
}

message CollListPublishedRequest
{
    optional string             subject     = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
}

// ============================ Group Messages

message GroupCreateRequest
{
    required SDMS.GroupData     group       = 1;
}

message GroupUpdateRequest
{
    required string             uid         = 1;
    required string             gid         = 2;
    optional string             title       = 3;
    optional string             desc        = 4;
    repeated string             add_uid     = 5;
    repeated string             rem_uid     = 6;
}

message GroupDataReply
{
    repeated SDMS.GroupData     group       = 1;
}

message GroupDeleteRequest
{
    required string             uid         = 1;
    required string             gid         = 2;
}

message GroupListRequest
{
    required string             uid         = 1;
}

message GroupViewRequest
{
    required string             uid         = 1;
    required string             gid         = 2;
}

// ============================ ACL Messages

message ACLViewRequest
{
    required string             id          = 1;
}

message ACLUpdateRequest
{
    required string             id          = 1;
    optional string             rules       = 2;
}

// List users/projects owning any ACLs set for client or subject (user or project)
// Returns ListingReply
message ACLBySubjectRequest
{
    optional string             subject         = 1;
    optional bool               inc_users       = 2;
    optional bool               inc_projects    = 3;
}

// List top-level ACLs set by owner for client or subject (user or project)
// Returns ListingReply
message ACLListItemsBySubjectRequest
{
    optional string             subject     = 1;
    required string             owner       = 2;
}

message ACLDataReply
{
    repeated ACLRule            rule        = 1;
}

// ============================ Project Messages

message ProjectViewRequest
{
    required string             id          = 1;
}

message ProjectDataReply
{
    repeated ProjectData        proj        = 1;
}

message ProjectCreateRequest
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    repeated string             admin       = 4;
    repeated string             member      = 5;
}

message ProjectUpdateRequest
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    optional bool               admin_set   = 4 [default = false];
    repeated string             admin       = 5;
    optional bool               member_set  = 6 [default = false];
    repeated string             member      = 7;
}

message ProjectDeleteRequest
{
    repeated string             id          = 1;
}

message ProjectListRequest
{
    optional string             subject     = 1;
    optional bool               as_owner    = 2;
    optional bool               as_admin    = 3;
    optional bool               as_member   = 4;
    optional SortOption         sort        = 5;
    optional bool               sort_rev    = 6;
    optional uint32             offset      = 7;
    optional uint32             count       = 8;
}

message ProjectSearchRequest
{
    required string             text_query  = 1;
    repeated string             scope       = 2;
}

message ProjectGetRoleRequest
{
    required string             id          = 1;
    optional string             subject     = 2;
}

message ProjectGetRoleReply
{
    required ProjectRole        role        = 1;
}

// ============================ Repo Messages

message RepoDataDeleteRequest
{
    repeated RecordDataLocation loc         = 1;
}

message RepoDataGetSizeRequest
{
    repeated RecordDataLocation loc         = 1;
}

message RepoDataSizeReply
{
    repeated RecordDataSize     size        = 1;
}

message RepoPathCreateRequest
{
    required string             path        = 1;
}

message RepoPathDeleteRequest
{
    required string             path        = 1;
}

message RepoListRequest
{
    optional bool               details     = 1;
    optional bool               all         = 2;
}

message RepoViewRequest
{
    required string             id          = 1;
}

message RepoCreateRequest
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             desc        = 3;
    optional string             domain      = 5;
    required string             path        = 6;
    optional string             exp_path    = 7;
    required string             address     = 8;
    required string             endpoint    = 9;
    required string             pub_key     = 10;
    required uint64             capacity    = 11;
    repeated string             admin       = 12;
}

message RepoUpdateRequest
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    optional string             domain      = 5;
    optional string             path        = 6;
    optional string             exp_path    = 7;
    optional string             address     = 8;
    optional string             endpoint    = 9;
    optional string             pub_key     = 10;
    optional uint64             capacity    = 11;
    repeated string             admin       = 12;
}

message RepoDeleteRequest
{
    required string             id          = 1;
}

message RepoDataReply
{
    repeated SDMS.RepoData      repo        = 1;
}

message RepoCalcSizeRequest
{
    required bool               recurse     = 1;
    repeated string             item        = 2;
}

message RepoCalcSizeReply
{
    repeated AllocStatsData     stats       = 1;
}

message RepoListAllocationsRequest
{
    required string             id          = 1;
}

message RepoListSubjectAllocationsRequest
{
    optional string             subject     = 1;
    optional bool               stats       = 2;
}

message RepoListObjectAllocationsRequest
{
    required string             id          = 1;
}

message RepoViewAllocationRequest
{
    required string             repo        = 1;
    required string             subject     = 2;
}

message RepoAllocationsReply
{
    repeated AllocData          alloc       = 1;
}

message RepoAllocationStatsRequest
{
    required string             repo        = 1;
    optional string             subject     = 2;
}

message RepoAllocationStatsReply
{
    required AllocStatsData     alloc       = 1;
}

// Reply is ACK/NACK
message RepoAllocationCreateRequest
{
    required string             repo        = 1;
    required string             subject     = 2;
    required uint64             data_limit  = 3;
    required uint32             rec_limit   = 4;
}

// Reply is ACK/NACK
message RepoAllocationSetRequest
{
    required string             repo        = 1;
    required string             subject     = 2;
    required uint64             data_limit  = 3;
    required uint32             rec_limit   = 4;
}

// Reply is ACK/NACK
message RepoAllocationSetDefaultRequest
{
    required string             repo        = 1;
    optional string             subject     = 2;
}

// Reply is ACK/NACK
message RepoAllocationDeleteRequest
{
    required string             repo        = 1;
    required string             subject     = 2;
}

// Reply is ACK/NACK
message RepoAuthzRequest
{
    required string             repo        = 1;
    required string             client      = 2;
    required string             file        = 3;
    required string             action      = 4;
}

// ============================ Topic Messages

message TopicLinkRequest
{
    required string             topic       = 1;
    required string             id          = 2;
}

message TopicUnlinkRequest
{
    required string             topic       = 1;
    required string             id          = 2;
}

// ============================ Query Messages

message QueryCreateRequest
{
    required string             title       = 1;
    required string             query       = 2;
    optional string             query_comp  = 3;
    optional bool               use_owner   = 4;
    optional bool               use_sh_usr  = 5;
    optional bool               use_sh_prj  = 6;
}

message QueryUpdateRequest
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             query       = 3;
    optional string             query_comp  = 4;
    optional bool               use_owner   = 5;
    optional bool               use_sh_usr  = 6;
    optional bool               use_sh_prj  = 7;
}

message QueryDeleteRequest
{
    repeated string             id          = 1;
}

message QueryListRequest
{
    optional uint32             offset      = 1;
    optional uint32             count       = 2;
}

message QueryViewRequest
{
    required string             id          = 1;
}

message QueryExecRequest
{
    required string             id          = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
}

message QueryDataReply
{
    repeated SDMS.QueryData     query       = 1;
}

// ============================ Annotation Messages

message AnnotationListBySubjectRequest
{
    required string             subject     = 1;
}

message AnnotationViewRequest
{
    required string             id          = 1;
}

message AnnotationDataReply
{
    repeated SDMS.NoteData      note    = 1;
    repeated SDMS.ListingData   update  = 2;
}

message AnnotationCreateRequest
{
    required SDMS.NoteType      type        = 1;
    required string             subject     = 2;
    required string             title       = 3;
    required string             comment     = 4;
    required bool               activate    = 5;
}

message AnnotationUpdateRequest
{
    required string             id          = 1;
    required string             comment     = 2;
    optional SDMS.NoteType      new_type    = 3;
    optional SDMS.NoteState     new_state   = 4;
    optional string             new_title   = 5;
}

message AnnotationCommentEditRequest
{
    required string             id          = 1;
    required uint32             comment_idx = 2;
    required string             comment     = 3;
}

// ============================ Task Messages

message TaskViewRequest
{
    required string             task_id     = 1;
}

message TaskListRequest
{
    optional string             proj_id     = 1;
    optional uint32             since       = 2;
    optional uint32             from        = 3;
    optional uint32             to          = 4;
    repeated SDMS.TaskStatus    status      = 5;
    optional uint32             offset      = 6;
    optional uint32             count       = 7;
}

message TaskDataReply
{
    repeated SDMS.TaskData      task        = 1;
}


// ============================ Tag Messages


// Returns TagDataReply
message TagSearchRequest
{
    optional string             name        = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
}

// Returns TagDataReply
message TagListByCountRequest
{
    optional uint32             offset      = 1;
    optional uint32             count       = 2;
}

message TagDataReply
{
    repeated SDMS.TagData       tag         = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
    optional uint32             total       = 4;
}


// ============================ Schema / Validation Messages

message MetadataValidateRequest
{
    required string             metadata    = 1;
    required string             sch_id      = 2;
}

message MetadataValidateReply
{
    optional string             errors      = 1;
}

message SchemaViewRequest
{
    required string             id          = 1;
    optional bool               resolve     = 2;
}

message SchemaSearchRequest
{
    optional string             id          = 1;
    optional string             text        = 2;
    optional string             owner       = 3;
    optional SDMS.SortOption    sort        = 4;
    optional bool               sort_rev    = 5;
    optional uint32             offset      = 6;
    optional uint32             count       = 7;
}

message SchemaDataReply
{
    repeated SDMS.SchemaData    schema      = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
    optional uint32             total       = 4;
}

message SchemaCreateRequest
{
    required string             id          = 1;
    required string             desc        = 2;
    required bool               pub         = 3;
    required bool               sys         = 4;
    required string             def         = 5;
}

message SchemaReviseRequest
{
    required string             id          = 1;
    optional string             desc        = 2;
    optional bool               pub         = 3;
    optional bool               sys         = 4;
    optional string             def         = 5;
}

message SchemaUpdateRequest
{
    required string             id          = 1;
    optional string             id_new      = 2;
    optional string             desc        = 3;
    optional bool               pub         = 4;
    optional bool               sys         = 5;
    optional string             def         = 6;
}

message SchemaDeleteRequest
{
    required string             id          = 1;
}


// ============================ Catalog / Topic Messages



// Returns TopicDataReply
message TopicListTopicsRequest
{
    optional string             topic_id    = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
}

// Returns TopicDataReply
message TopicViewRequest
{
    required string             id          = 1;
}

// Returns TopicDataReply
message TopicSearchRequest
{
    optional string             phrase      = 1;
}

message TopicDataReply
{
    repeated TopicData          topic       = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
    optional uint32             total       = 4;
}

