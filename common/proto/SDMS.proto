package SDMS;

enum Protocol
{
    ID = 1;
}

// ============================ Enums

enum ErrorCode
{
    ID_INTERNAL_ERROR           = 1;
    ID_AUTHN_REQUIRED           = 2;
    ID_AUTHN_ERROR              = 3;
}

enum Status
{
    NORMAL      = 0;
    DEGRADED    = 1;
    FAILED      = 2;
    OFFLINE     = 3;
}

// ============================ Data Structures

message UserData
{
    required string             uid         = 1;
    required string             name_last   = 2;
    required string             name_first  = 3;
    optional string             email       = 4;
    optional string             phone       = 5;
    optional string             globus_id   = 6;
}

// ============================ Reply Header

// Reply header is only used to capture error information
// and must not be set unless an error occurs. Text error
// messages are optional but useful, and should generally
// be used.

message ReplyHeader
{
    required ErrorCode          err_code    = 1;
    optional string             err_msg     = 2;
}

// ============================ Basic Messages

// AckReply is default reply when no data needs to be returned

message AckReply
{
    optional ReplyHeader        header      = 1;
}

// Status request-reply and event provide Service status

message StatusRequest
{
}

message StatusReply
{
    optional ReplyHeader        header      = 1;
    required Status             status      = 2;
}

message StatusEvent
{
    required Status             status      = 1;
}

// Ping request-reply is used for testing communication

message PingRequest
{
}

message PingReply
{
    optional ReplyHeader        header      = 1;
}

// Test request-reply is for development testing

message TextRequest
{
    required string             data        = 1;
}

message TextReply
{
    optional ReplyHeader        header      = 1;
    required string             data        = 2;
}

// ============================ SDMS Messages


message UserListRequest
{
    optional string             facility    = 1;
    optional string             project     = 2;
    optional bool               details     = 3;
    optional uint32             offset      = 4;
    optional uint32             count       = 5;
}

message UserListReply
{
    optional SDMS.ReplyHeader   header      = 1;
    repeated UserData           user        = 2;
}
