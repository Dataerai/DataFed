package SDMS;

enum Protocol
{
    ID = 1;
}

// ============================ Enums

enum ErrorCode
{
    ID_BAD_REQUEST              = 1;
    ID_INTERNAL_ERROR           = 2;
    ID_SERVICE_ERROR            = 3;
    ID_AUTHN_REQUIRED           = 4;
    ID_AUTHN_ERROR              = 5;
}

enum ServiceStatus
{
    SS_NORMAL       = 0;
    SS_DEGRADED     = 1;
    SS_FAILED       = 2;
    SS_OFFLINE      = 3;
}

enum TransferStatus
{
    TS_ACTIVE       = 0;
    TS_INACTIVE     = 1;
    TS_SUCCEEDED    = 2;
    TS_FAILED       = 3;
}

enum Permissions
{
    PERM_NONE           = 0x000;
    PERM_REC_LIST       = 0x001;   // Find record by browsing
    PERM_REC_VIEW       = 0x002;   // Read public record fields (not collection items or raw data)
    PERM_REC_UPDATE     = 0x004;   // Update public record fields
    PERM_REC_ADMIN      = 0x008;   // Read, write admin fields, delete record
    PERM_REC_TAG        = 0x010;   // Add/remove tags on record
    PERM_REC_NOTE       = 0x020;   // Add, remove, edit annotations on record
    PERM_DAT_READ       = 0x040;   // Read raw data or list collection items
    PERM_DAT_WRITE      = 0x080;   // Write raw data or add/remove collection items
    PERM_ALL            = 0x0FF;
}

// ============================ Data Structures

message UserData
{
    required string             uid         = 1;
    required string             name_last   = 2;
    required string             name_first  = 3;
    optional string             email       = 4;
    optional string             phone       = 5;
    optional string             globus_id   = 6;
    optional bool               is_admin    = 7;
    optional bool               is_project  = 8;
}

message RecordData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             alias       = 3;
    optional string             desc        = 4;
    optional string             metadata    = 5;
    optional string             data_path   = 6;
}

message CollData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             alias       = 3;
    optional string             desc        = 4;
}

// ============================ Reply Header


// ============================ Basic Messages

// AckReply is default reply when no data needs to be returned

message AckReply
{
}

// NackReply is only used to capture error information.
// Text error messages are optional but useful, and
// should generally be used.

message NackReply
{
    required ErrorCode          err_code    = 1;
    optional string             err_msg     = 2;
}

// Service status request-reply and event

message StatusRequest
{
}

message StatusReply
{
    required ServiceStatus      status      = 1;
}

message StatusEvent
{
    required ServiceStatus      status      = 1;
}

// Ping request-reply is used for testing communication, reply is ACK

message PingRequest
{
}

// Test request-reply is for development testing

message TextRequest
{
    required string             data        = 1;
}

message TextReply
{
    required string             data        = 1;
}

// ============================ Permissions Messages

message CheckPermsRequest
{
    required string             id          = 1;
    required uint32             perms       = 2;
}

message CheckPermsReply
{
    required string             id          = 1;
    required uint32             granted     = 2;
    required uint32             denied      = 3;
}

// ============================ User Messages

message UserViewRequest
{
    optional string             user        = 1;
    optional bool               details     = 2;
}

message UserListRequest
{
    optional bool               details     = 1;
    optional uint32             offset      = 2;
    optional uint32             count       = 3;
}

// Returned for any command the returns one or more user records
message UserDataReply
{
    repeated UserData           user        = 1;
}

// ============================ Data Record Messages

message RecordViewRequest
{
    required string             id          = 1;
    optional bool               details     = 2;
}

// Returned for any command the returns one or more user records
message RecordDataReply
{
    repeated RecordData         record      = 1;
}

// ============================ Raw Data Messages

message ResolveXfrRequest
{
    required string             id          = 1;
    required uint32             perms       = 2;
}

message ResolveXfrReply
{
    required string             id          = 1;
    required string             src_path    = 2;
    required string             src_name    = 3;
    required string             globus_id   = 4;
}


message GetDataMessage
{
    required string             id          = 1;
    optional string             local_path  = 2;
}

message PutDataMessage
{
    required string             id          = 1;
    optional string             local_path  = 2;
}

// ============================ Collection Messages

message CollListRequest
{
    optional string             user        = 1;
    optional bool               details     = 2;
    optional uint32             offset      = 3;
    optional uint32             count       = 4;
}

// Returned for any command the returns one or more user records
message CollDataReply
{
    repeated CollData           coll        = 1;
}
