package SDMS;

// ============================ Enums

enum ErrorCode
{
    ID_BAD_REQUEST              = 1;
    ID_INTERNAL_ERROR           = 2;
    ID_CLIENT_ERROR             = 3;
    ID_SERVICE_ERROR            = 4;
    ID_AUTHN_REQUIRED           = 5;
    ID_AUTHN_ERROR              = 6;
    ID_DEST_PATH_ERROR          = 7;
    ID_DEST_FILE_ERROR          = 8;
}

enum ServiceStatus
{
    SS_NORMAL       = 0;
    SS_DEGRADED     = 1;
    SS_FAILED       = 2;
    SS_OFFLINE      = 3;
}

/*
enum XfrMode
{
    XM_GET          = 0;
    XM_PUT          = 1;
    XM_COPY         = 2;
}
*/


enum CollDelMode
{
    CDM_ALL         = 0;
    CDM_OWNED       = 1;
}

enum SearchScope
{
    SS_USER                     = 1;
    SS_PROJECT                  = 2;
    SS_OWNED_PROJECTS           = 3;
    SS_MANAGED_PROJECTS         = 4;
    SS_MEMBER_PROJECTS          = 5;
    SS_COLLECTION               = 6;
    SS_TOPIC                    = 7;
    SS_SHARED_BY_USER           = 8;
    SS_SHARED_BY_ANY_USER       = 9;
    SS_SHARED_BY_PROJECT        = 10;
    SS_SHARED_BY_ANY_PROJECT    = 11;
    SS_PUBLIC                   = 12;
    SS_VIEW                     = 13;
}

enum DependencyType
{
    DEP_IS_DERIVED_FROM         = 0;
    DEP_IS_COMPONENT_OF         = 1;
    DEP_IS_NEW_VERSION_OF       = 2;
    DEP_TYPE_COUNT              = 3;
}

enum DependencyDir
{
    DEP_IN                      = 0;
    DEP_OUT                     = 1;
}

enum SortOption
{
    SORT_ID                     = 0;
    SORT_TITLE                  = 1;
    SORT_TIME_CREATE            = 2;
    SORT_TIME_UPDATE            = 3;
}

/*
enum Permissions
{
    PERM_NONE       = 0x00;
    PERM_VIEW       = 0x01;   // Read public record fields (not collection items or raw data)
    PERM_RD_META    = 0x02;   // Read raw data or list collection items
    PERM_RD_DATA    = 0x04;   // Read raw data or list collection items
    PERM_WR_META    = 0x08;   // Write raw data or add/remove collection items
    PERM_WR_DATA    = 0x10;   // Write raw data or add/remove collection items
    PERM_ADMIN      = 0x20;   // Read, write admin fields, delete record
    //PERM_TAG        = 0x40;   // Add/remove tags on record
    //PERM_NOTE       = 0x80;   // Add, remove, edit annotations on record
    PERM_ALL        = 0x3F;
}*/

// ============================ Data Structures

message AllocStatsData
{
    required string             repo        = 1;
    required uint32             records     = 2;
    required uint32             files       = 3;
    required uint64             total_sz    = 4;
    repeated uint32             histogram   = 5;
}

message AllocData
{
    required string             repo        = 1;
    required uint64             max_size    = 2;
    required uint64             tot_size    = 3;
    required uint32             max_count   = 4;
    required string             path        = 5;
    optional string             id          = 6;
    optional bool               sub_alloc   = 7;
    optional AllocStatsData     stats       = 8;
}

// For viewing dependencies
message DependencyData
{
    required string             id          = 1;
    optional string             alias       = 2;
    required DependencyType     type        = 3;
    required DependencyDir      dir         = 4;
}

// For specifying dependencies
message DependencySpecData
{
    required string             id          = 1;
    required DependencyType     type        = 3;
}

message UserData
{
    required string             uid             = 1;
    required string             name            = 2;
    optional string             email           = 3;
    optional string             options         = 4;
    optional bool               is_admin        = 5;
    optional bool               is_repo_admin   = 6;
    repeated string             ident           = 7;
    repeated AllocData          alloc           = 8;
}

message ProjectData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             desc        = 3;
    optional string             sub_repo    = 4;
    optional uint64             sub_alloc   = 5;
    optional uint64             sub_usage   = 6;
    optional string             owner       = 7;
    optional uint32             ct          = 8;
    optional uint32             ut          = 9;
    repeated string             admin       = 10;
    repeated string             member      = 11;
    repeated AllocData          alloc       = 12;
}

message ListingData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             alias       = 3;
    optional bool               locked      = 4;
    optional string             owner       = 5;
    optional string             creator     = 6;
    optional int32              gen         = 7;
    optional uint64             size        = 8;
    optional string             doi         = 9;
    optional string             url         = 10;
    repeated DependencyData     dep         = 11;
}

message PathData
{
    repeated ListingData        item        = 1;
}

message RecordData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             alias       = 3;
    optional string             desc        = 4;
    optional string             keyw        = 5;
    //optional string             topic       = 6;
    optional bool               ispublic    = 6;
    optional string             doi         = 7;
    optional string             data_url    = 8;
    optional string             metadata    = 9;
    optional string             repo_id     = 10;
    optional uint64             size        = 11;
    optional string             source      = 12;
    optional string             ext         = 13;
    optional bool               ext_auto    = 14;
    optional uint32             ct          = 15;
    optional uint32             ut          = 16;
    optional uint32             dt          = 17;
    optional string             owner       = 18;
    optional string             creator     = 19;
    optional bool               locked      = 20;
    optional string             parent_id   = 21;
    repeated DependencyData     deps        = 22;
}

// Fields required for a data repo to locate raw data
// TODO Path will be removed and replaced with owner ID
message RecordDataLocation
{
    required string             id          = 1;
    required string             path        = 2;
}

// A list of data locations associated with a specific repo
message RepoRecordDataLocations
{
    required string             repo_id     = 1;
    repeated RecordDataLocation loc         = 2;
}

message RecordDataSize
{
    required string             id          = 1;
    required uint64             size        = 2;
}

message CollData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             alias       = 3;
    optional string             desc        = 4;
    optional bool               ispublic    = 5;
    optional string             topic       = 6;
    optional string             owner       = 7;
    optional uint32             ct          = 8;
    optional uint32             ut          = 9;
    optional string             parent_id   = 10;
}

message GroupData
{
    required string             uid         = 1;
    required string             gid         = 2;
    optional string             title       = 3;
    optional string             desc        = 4;
    repeated string             member      = 5;
}

message ACLRule
{
    required string             id          = 1;
    optional uint32             grant       = 2;
    optional uint32             inhgrant    = 3;
}

message RepoData
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    optional uint64             capacity    = 4;
    optional string             pub_key     = 5;
    optional string             address     = 6;
    optional string             endpoint    = 7;
    optional string             path        = 8;
    optional string             domain      = 9;
    optional string             exp_path    = 10;
    repeated string             admin       = 11;
}

message QueryData
{
    required string             id          = 1;
    required string             title       = 2;
    required string             query       = 3;
    optional string             owner       = 4;
    optional bool               use_owner   = 5;
    optional bool               use_sh_usr  = 6;
    optional bool               use_sh_prj  = 7;
    optional uint32             ct          = 8;
    optional uint32             ut          = 9;
}

// -------------------------------------------------- TASK DEFINES

enum TaskType
{
    TT_DATA_GET         = 0;
    TT_DATA_PUT         = 1;
    TT_DATA_CHG_ALLOC   = 2;
    TT_DATA_CHG_OWNER   = 3;
    TT_DATA_DEL         = 4;
    TT_ALLOC_NEW        = 5;
    TT_ALLOC_DEL        = 6;
}

enum TaskStatus
{
    TS_BLOCKED      = 0;
    TS_READY        = 1;
    TS_RUNNING      = 2;
    TS_SUCCEEDED    = 3;
    TS_FAILED       = 4;
}

enum Encryption
{
    ENCRYPT_NONE    = 0;
    ENCRYPT_AVAIL   = 1;
    ENCRYPT_FORCE   = 2;
}

/*
message FileInfo
{
    required string             id          = 1;
    required string             filename    = 2;
}

message TaskDataGet
{
    required Encryption         encrypt     = 2;
    required bool               encrypted   = 3;
    required string             repo_id     = 4;
    required string             repo_ep     = 5;
    required string             repo_path   = 6;
    required string             dst_ep      = 7;
    required string             dst_path    = 8;
    repeated FileInfo           files       = 9;
    required uint32             file_idx    = 10;
}

message TaskDataPut
{
    required Encryption         encrypt     = 2;
    required bool               encrypted   = 3;
    required string             repo_id     = 4;
    required string             repo_ep     = 5;
    required string             repo_path   = 6;
    required string             src_ep      = 7;
    required string             src_path    = 8;
    required FileInfo           file        = 9;
    optional string             ext         = 10;
}

message TaskDataChangeAlloc
{
    required Encryption         encrypt     = 1;
    required bool               encrypted   = 2;
    required string             repo_id     = 3;
    required string             repo_ep     = 4;
    required string             repo_path   = 5;
    required string             dst_repo_id = 6;
    required string             dst_ep      = 7;
    required string             dst_path    = 8;
    repeated string             data_id     = 9;
    required uint32             file_idx    = 11;
}

message TaskDataChangeOwner
{
}

message TaskDataDelete
{
    required string             repo_id     = 1;
    required string             repo_path   = 2;
    repeated string             data_id     = 3;
    required uint32             file_idx    = 4;
}
*/

message TaskData
{
    required string                 id          = 1;
    required TaskType               type        = 2;
    required TaskStatus             status      = 3;
    required string                 user        = 4;
    required float                  progress    = 5;
    required string                 msg         = 6;
    required uint32                 ct          = 7;
    required uint32                 ut          = 8;
    //optional TaskDataGet            state_get   = 9;
    //optional TaskDataPut            state_put   = 10;
    //optional TaskDataChangeAlloc    state_all   = 11;
    //optional TaskDataChangeOwner    state_own   = 12;
    //optional TaskDataDelete         state_del   = 13;
}


message HttpXfrData
{
    required string             rec_id      = 1;
    required string             from        = 3;
    required string             to          = 4;
    required uint32             started     = 5;
    required uint32             updated     = 6;
    //required XfrStatus          status      = 7;
    //optional string             err_msg     = 8; // Only set if status == XFR_FAILED
}
