package SDMS;

// ============================ Enums

enum ErrorCode
{
    ID_BAD_REQUEST              = 1;
    ID_INTERNAL_ERROR           = 2;
    ID_CLIENT_ERROR             = 3;
    ID_SERVICE_ERROR            = 4;
    ID_AUTHN_REQUIRED           = 5;
    ID_AUTHN_ERROR              = 6;
    ID_DEST_PATH_ERROR          = 7;
    ID_DEST_FILE_ERROR          = 8;
}

enum ServiceStatus
{
    SS_NORMAL       = 0;
    SS_DEGRADED     = 1;
    SS_FAILED       = 2;
    SS_OFFLINE      = 3;
}

enum XfrMode
{
    XM_GET          = 0;
    XM_PUT          = 1;
    XM_COPY         = 2;
}

enum XfrStatus
{
    XS_INIT         = 0;
    XS_ACTIVE       = 1;
    XS_INACTIVE     = 2;
    XS_SUCCEEDED    = 3;
    XS_FAILED       = 4;
}

enum CollReadMode
{
    CRM_ALL         = 0;
    CRM_COLL        = 1;
    CRM_DATA        = 2;
}

enum CollDelMode
{
    CDM_ALL         = 0;
    CDM_OWNED       = 1;
}

enum SearchScope
{
    SS_MY_DATA      = 0x01;
    SS_MY_PROJ      = 0x02;
    SS_TEAM_PROJ    = 0x04;
    SS_USER_SHARE   = 0x08;
    SS_PROJ_SHARE   = 0x10;
    SS_PUBLIC       = 0x20;
}

enum Permissions
{
    PERM_NONE       = 0x00;
    PERM_VIEW       = 0x01;   // Read public record fields (not collection items or raw data)
    PERM_RD_META    = 0x02;   // Read raw data or list collection items
    PERM_RD_DATA    = 0x04;   // Read raw data or list collection items
    PERM_WR_META    = 0x08;   // Write raw data or add/remove collection items
    PERM_WR_DATA    = 0x10;   // Write raw data or add/remove collection items
    PERM_ADMIN      = 0x20;   // Read, write admin fields, delete record
    PERM_TAG        = 0x40;   // Add/remove tags on record
    PERM_NOTE       = 0x80;   // Add, remove, edit annotations on record
    PERM_ALL        = 0xFF;
}

// ============================ Data Structures

message AllocData
{
    required string             repo        = 1;
    required uint64             alloc       = 2;
    required uint64             usage       = 3;
    required string             path        = 4;
    optional string             id          = 5;
    optional string             name        = 6;
}

message AllocStatsData
{
    required uint32             records     = 1;
    required uint32             files       = 2;
    required uint64             total_sz    = 3;
    repeated float              histogram   = 4;
}

message UserData
{
    required string             uid             = 1;
    required string             name            = 2;
    optional string             email           = 3;
    optional string             phone           = 4;
    optional bool               is_admin        = 5;
    optional bool               is_repo_admin   = 6;
    repeated string             ident           = 8;
    repeated AllocData          alloc           = 9;
}

message ProjectData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             desc        = 3;
    optional string             sub_repo    = 4;
    optional uint64             sub_alloc   = 5;
    optional uint64             sub_usage   = 6;
    optional string             owner       = 7;
    optional uint32             ct          = 8;
    optional uint32             ut          = 9;
    repeated string             admin       = 10;
    repeated string             member      = 11;
    repeated AllocData          alloc       = 12;
}

message ListingData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             alias       = 3;
}

message RecordData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             alias       = 3;
    optional string             desc        = 4;
    optional bool               ispublic    = 5;
    optional string             metadata    = 6;
    optional string             repo_id     = 7;
    optional uint64             size        = 8;
    optional uint32             ct          = 9;
    optional uint32             ut          = 10;
    optional uint32             dt          = 11;
    optional string             owner       = 12;
}

message RecordDataLocation
{
    required string             id          = 1;
    required string             repo_id     = 2;
    required string             path        = 3;
}

message CollData
{
    required string             id          = 1;
    required string             title       = 2;
    optional string             alias       = 3;
    optional string             desc        = 4;
    optional bool               ispublic    = 5;
    optional string             owner       = 6;
    optional uint32             ct          = 7;
    optional uint32             ut          = 8;
}

message XfrData
{
    required string             id          = 1;
    required XfrMode            mode        = 2;
    required XfrStatus          status      = 3;
    required string             data_id     = 4; // With revision?
    required string             repo_path   = 5;
    required string             local_path  = 6;
    required string             user_id     = 7;
    required string             repo_id     = 8;
    required uint32             started     = 9;
    required uint32             updated     = 10;
    optional string             task_id     = 11; // Only set if status > XFR_INIT
    optional string             err_msg     = 12; // Only set if status == XFR_FAILED
}

message GroupData
{
    required string             uid         = 1;
    required string             gid         = 2;
    optional string             title       = 3;
    optional string             desc        = 4;
    repeated string             member      = 5;
}

message ACLRule
{
    required string             id          = 1;
    optional uint32             grant       = 2;
    optional uint32             deny        = 3;
    optional uint32             inhgrant    = 4;
    optional uint32             inhdeny     = 5;
}

message RepoData
{
    required string             id          = 1;
    optional string             title       = 2;
    optional string             desc        = 3;
    optional uint64             capacity    = 4;
    optional string             pub_key     = 5;
    optional string             address     = 6;
    optional string             endpoint    = 7;
    optional string             path        = 8;
    repeated string             admin       = 9;
}
