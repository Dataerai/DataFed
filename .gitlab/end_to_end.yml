---
################################################################################
# STAGE: End to end setup arango
################################################################################

end-to-end-arango-setup:
  variables:
    GIT_STRATEGY: clone
  stage: end-to-end-setup-arango
  tags:
    - ci-datafed-arango
  script:
    - arangod --version
    - ./scripts/run_arango_service.sh

end-to-end-foxx-setup:
  variables:
    IMAGE_TAG: "datafed/foxx-"
    GIT_STRATEGY: clone
    HOST_LOG_FILE_PATH: "/shared/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    DATAFED_DATABASE_HOST: "$CI_DATAFED_DATABASE_HOST"
    RUN_FILE: "run_foxx.sh"
  stage: end-to-end-setup-arango
  needs: ["end-to-end-arango-setup"]
  tags:
    - docker
  script:
    - sudo apt-get install jq -y
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - USER_ID=$(id -u)
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - echo "$BRANCH_LOWER"
    - ./scripts/generate_datafed.sh
    - env > env_file
    - mkdir foxx_tmp
    - ls -la foxx_tmp
    - if [ -f foxx_tmp/.foxx_is_installed ]; then rm foxx_tmp/.foxx_is_installed; fi
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - ./scripts/container_stop.sh -n "foxx-" -p
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - echo "#!/bin/bash" > "${RUN_FILE}"
    - echo "docker run -d \\" >> "${RUN_FILE}"
    - echo "--name \"foxx-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_ZEROMQ_SYSTEM_SECRET=\"$CI_DATAFED_ZEROMQ_SYSTEM_SECRET\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DOMAIN=\"$CI_DATAFED_DOMAIN\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DATABASE_PASSWORD=\"$CI_DATAFED_DATABASE_PASSWORD\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DATABASE_IP_ADDRESS_PORT=\"$CI_DATAFED_DATABASE_IP_ADDRESS_PORT\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DATABASE_HOST=\"$CI_DATAFED_DATABASE_HOST\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DEFAULT_LOG_PATH=\"$CONTAINER_LOG_FILE_PATH\" \\" >> "${RUN_FILE}"
    - echo "-e UID=\"$USER_ID\" \\" >> "${RUN_FILE}"
    - echo "-v \"${HOST_LOG_FILE_PATH}:${CONTAINER_LOG_FILE_PATH}\" \\" >> "${RUN_FILE}"
    - echo "-v \"./foxx_tmp:/tmp\" \\" >> "${RUN_FILE}"
    - echo "-t \"${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}:latest\"" >> "${RUN_FILE}"
    - chmod +x "${RUN_FILE}"
    - "./${RUN_FILE}"
    - sleep 10
      # Make sure container is running immediately after because it is meant to
      # be ephermal anyway, this is not the same for the other containers
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}:latest"
    - while [ ! -f "foxx_tmp/.foxx_is_installed" ]; do echo "Waiting for foxx_tmp/.foxx_is_installed"; sleep 10; done
    - ./scripts/ci_database_health_check.sh
  after_script:
    - rm -rf foxx_tmp

################################################################################
# STAGE: End to end setup
################################################################################

end-to-end-core-setup:
  variables:
    IMAGE_TAG: "datafed/core-"
    GIT_STRATEGY: clone
    HOST_LOG_FILE_PATH: "/shared/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    DATAFED_DATABASE_HOST: "$CI_DATAFED_DATABASE_HOST"
  stage: end-to-end-setup
  needs: ["end-to-end-arango-setup", "end-to-end-foxx-setup"]
  tags:
    - ci-datafed-core
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - USER_ID=$(id -u)
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - echo "$BRANCH_LOWER"
    - ./scripts/generate_datafed.sh
    - env > env_file
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - ./scripts/container_stop.sh -n "core-" -p
    - ./scripts/ci_database_health_check.sh
    - cat $CI_DATAFED_CORE_PUB_KEY > /shared/keys/datafed-core-key.pub
    - cat $CI_DATAFED_CORE_PRIV_KEY > /shared/keys/datafed-core-key.priv
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - ./scripts/generate_metadata_container_scripts.sh --core-image "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" --docker-tag latest --core-name "core-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}"
    - $DATAFED_INSTALL_PATH/scripts/create_datafed_network.sh
    - $DATAFED_INSTALL_PATH/scripts/run_core_container.sh
    - sleep 10
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}:latest" 
    - $DATAFED_INSTALL_PATH/scripts/remove_core_container.sh
    - $DATAFED_INSTALL_PATH/scripts/remove_datafed_network.sh

end-to-end-ws-setup:
  variables:
    IMAGE_TAG: "datafed/ws-"
    GIT_STRATEGY: clone
    HOST_LOG_FILE_PATH: "/shared/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    DATAFED_WEB_KEY_DIR: "/shared/keys"
    DATAFED_WEB_CERT_NAME: "cert.crt"
    DATAFED_WEB_KEY_NAME: "cert.key"
    DATAFED_WEB_CERT_PATH: "${DATAFED_WEB_KEY_DIR}/${DATAFED_WEB_CERT_NAME}"
    DATAFED_WEB_CSR_PATH: "${DATAFED_WEB_KEY_DIR}/cert.csr"
    DATAFED_WEB_KEY_PATH: "${DATAFED_WEB_KEY_DIR}/${DATAFED_WEB_KEY_NAME}"
  stage: end-to-end-setup
  needs : ["end-to-end-core-setup"]
  tags:
    - ci-datafed-core
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - mkdir -p "${DATAFED_WEB_KEY_DIR}"
    - ./scripts/ci_setup_web_certs.sh
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - ./scripts/generate_datafed.sh
    - docker login  "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - USER_ID=$(id -u)
    - GROUP_ID=$(id -g)
    - CORE_ADDRESS=$(hostname -I | awk '{print $1}')
    - cat $CI_DATAFED_CORE_PUB_KEY > /shared/keys/datafed-core-key.pub
    - env
    - ./scripts/container_stop.sh -n "ws-" -p 
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - ./scripts/generate_metadata_container_scripts.sh --web-image "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" --docker-tag latest --web-name "ws-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}"
    - $DATAFED_INSTALL_PATH/scripts/create_datafed_network.sh
    - $DATAFED_INSTALL_PATH/scripts/run_web_container.sh
    - sleep 30
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}:latest" 
    - $DATAFED_INSTALL_PATH/scripts/remove_core_container.sh
    - $DATAFED_INSTALL_PATH/scripts/remove_datafed_network.sh

# Repo server currently will crash on startup if it cannot connect to the core
# server.
end-to-end-repo-setup:
  variables:
    IMAGE_TAG: "datafed/repo-"
    GIT_STRATEGY: clone
    HOST_LOG_FILE_PATH: "/shared/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    DATAFED_HOST_COLLECTION_MOUNT: "/shared/collections"
    RUN_FILE: "run_repo.sh"
  stage: end-to-end-setup
  needs: ["end-to-end-ws-setup"]
  tags:
    - ci-datafed-globus
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - mkdir -p "$HOST_LOG_FILE_PATH"
      # Clean out previous collection to be safe
    - if [ -d "${DATAFED_HOST_COLLECTION_MOUNT}" ]; then rm -rf "${DATAFED_HOST_COLLECTION_MOUNT}"; fi
    - mkdir -p "${DATAFED_HOST_COLLECTION_MOUNT}"
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - USER_ID=$(id -u)
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - ./scripts/container_stop.sh -n "repo-" -p
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - cat $CI_DATAFED_CORE_PUB_KEY > /shared/datafed-repo-key.pub
    - cat $CI_DATAFED_CORE_PRIV_KEY > /shared/datafed-repo-key.priv
    - ./scripts/generate_repo_container_scripts.sh --repo-image "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" --docker-tag latest --repo-name "repo-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}" --host-collection-mount "$DATAFED_HOST_COLLECTION_MOUNT"
    - $DATAFED_INSTALL_PATH/scripts/run_repo_container.sh
    - sleep 10
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}:latest" 

# Requires setting up Globus Connect Server, requires firewall exceptions on
# the machine running this.
# Note we need the certificates to be available on the gcs-authz container
# if it is meant to be run on the same machine as the metadata services
# because the Apache web server can then route traffic appropriately, if 
# run separate from the metadata services it should not be needed.
# NOTE it should also run after the repo service because when the form is
# generated, it requires the repo server public key.
end-to-end-gcs-authz-setup:
  variables:
    IMAGE_TAG: "datafed/gcs-"
    HOST_LOG_FILE_PATH: "/shared/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    GIT_STRATEGY: clone
    DATAFED_HOST_COLLECTION_MOUNT: "/shared/collections"
    DATAFED_GLOBUS_DIR: "/shared/globus"
  stage: end-to-end-setup
  needs: ["end-to-end-repo-setup"]
  tags:
    - ci-datafed-globus
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - mkdir -p "${DATAFED_GLOBUS_DIR}"
    - cp "${CI_DATAFED_GCS_DEPLOYMENT_KEY}" "${DATAFED_GLOBUS_DIR}/deployment-key.json"
    - cp "${CI_DATAFED_GCS_CLIENT_CRED}" "${DATAFED_GLOBUS_DIR}/client_cred.json"
    - USER_ID=$(id -u)
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - ./scripts/container_stop.sh -n "gcs-authz" -p
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - cat $CI_DATAFED_CORE_PUB_KEY > /shared/datafed-repo-key.pub
    - cat $CI_DATAFED_CORE_PRIV_KEY > /shared/datafed-repo-key.priv
    - ./scripts/generate_repo_container_scripts.sh --gcs-image "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" --docker-tag latest --gcs-name "gcs-authz-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}" --host-collection-mount "$DATAFED_HOST_COLLECTION_MOUNT" --ip-address "$CI_DATAFED_GCS_IP" --repo-domain "$CI_DATAFED_REPO_DOMAIN"
    - $DATAFED_INSTALL_PATH/scripts/run_gcs_container.sh
    - while [ ! -f "${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh" ]; do echo "Waiting for ${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh"; sleep 10; done
    - cat "${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh"
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}:latest"
    - cp ${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh .
    - cp ${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.json .
  artifacts:
    paths:
      - "${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh"
      - "${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.json"


end_to_end_client-test:
  variables:
    GIT_STRATEGY: clone
    DATAFED_DATABASE_HOST: "${CI_DATAFED_DATABASE_HOST}"
    DATAFED_DATABASE_ZEROMQ_SYSTEM_SECRET: "${CI_DATAFED_DATABASE_ZEROMQ_SYSTEM_SECRET}"
    DATAFED_DATABASE_PASSWORD: "${CI_DATAFED_DATABASE_PASSWORD}"
    DATAFED_USER89_PASSWORD: "${CI_DATAFED_USER89_PASSWORD}"
    DATAFED_USER89_GLOBUS_REFRESH_TOKEN: "${CI_DATAFED_USER89_GLOBUS_REFRESH_TOKEN}"
    DATAFED_USER89_GLOBUS_ACCESS_TOKEN: "${CI_DATAFED_USER89_GLOBUS_ACCESS_TOKEN}"
    DATAFED_USER89_GLOBUS_UUID: "${CI_DATAFED_USER89_GLOBUS_UUID}"
    DATAFED_USER99_PASSWORD: "${CI_DATAFED_USER99_PASSWORD}"
    DATAFED_USER99_GLOBUS_REFRESH_TOKEN: "${CI_DATAFED_USER99_GLOBUS_REFRESH_TOKEN}"
    DATAFED_USER99_GLOBUS_ACCESS_TOKEN: "${CI_DATAFED_USER99_GLOBUS_ACCESS_TOKEN}"
    DATAFED_USER99_GLOBUS_UUID: "${CI_DATAFED_USER99_GLOBUS_UUID}"
    DATAFED_ZEROMQ_SYSTEM_SECRET: "${CI_DATAFED_ZEROMQ_SYSTEM_SECRET}"
    DATAFED_DOMAIN: "${CI_DATAFED_DOMAIN}"
    DATAFED_PYTHON_CLIENT_ALLOW_SELF_SIGNED_CERTS: "TRUE"
  stage: end-to-end-test
  dependencies:
    - end-to-end-gcs-authz-setup
  needs: ["end-to-end-gcs-authz-setup"]
  tags:
    - ci-datafed-client
  script:
    - export DATAFED_REPO_FORM_PATH="$(pwd)/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.json"
    - env > env_file
    - echo "Testing"
    - source /shared/install/python/datafed/bin/activate
    - ./scripts/generate_datafed.sh
    - >
      cmake -S. -B build
      -DENABLE_FOXX_TESTS=OFF
      -DBUILD_CORE_SERVER=OFF
      -DBUILD_COMMON=OFF
      -DBUILD_WEB_SERVER=OFF
      -DBUILD_DOCS=OFF
      -DBUILD_PYTHON_CLIENT=ON
      -DBUILD_TESTS=ON
      -DENABLE_END_TO_END_TESTS=ON
      -DINSTALL_FOXX=OFF
    - cmake --build build
    - cmake --build build --target pydatafed
    - cmake --build build --target test

end_to_end_error_discovery_arango:
  stage: log
  tags:
    - ci-datafed-arango
  script:
    - sudo journalctl --no-pager -u arangodb3.service
  rules:
    - when: always

end_to_end_error_discovery_gcs:
  extends: .error_logs_client_end_to_end
  variables:
    IMAGE_TAG: "datafed/gcs-"
  tags:
    - ci-datafed-globus
    - docker

end_to_end_error_discovery_repo:
  extends: .error_logs_client_end_to_end
  variables:
    IMAGE_TAG: "datafed/repo-"
  tags:
    - ci-datafed-globus
    - docker

end_to_end_error_discovery_core:
  extends: .error_logs_client_end_to_end
  variables:
    IMAGE_TAG: "datafed/core-"
  tags:
    - ci-datafed-core
    - docker

end_to_end_error_discovery_web:
  extends: .error_logs_client_end_to_end
  variables:
    IMAGE_TAG: "datafed/ws-"
  tags:
    - ci-datafed-core
    - docker
