---

.image_check:
  tags:
    - docker
  script:
    - |
      BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
      docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
      FORCE_BUILD="FALSE"
      set +e
      docker pull --quiet "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"
      if [ $? -eq 0 ]; then echo "Image exists"; else FORCE_BUILD="TRUE"; fi;
      set -e
      if [ "$FORCE_BUILD" == "TRUE" ]
      then
        cp .gitlab/build/force_build_${COMPONENT}_image.yml ${COMPONENT}_image.yml
      else
        cp .gitlab/build/build_${COMPONENT}_image.yml ${COMPONENT}_image.yml
      fi
      echo "REGISTRY=${REGISTRY}" >> build.env
      echo "HARBOR_USER=${HARBOR_USER}" >> build.env
      echo "HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN=${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}" >> build.env
      sed -i 's/\(HARBOR_USER=.*\)\$/\1$$/g' build.env
  artifacts:
    paths:
      - ${COMPONENT}_image.yml 
    reports:
      dotenv: build.env


.docker_base_build_script:
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - docker system prune -f
    - docker build -f "${DOCKER_FILE_PATH}" -t "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest" .
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - docker push "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"

.docker_build_script:
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - docker build --build-arg DEPENDENCIES="${REGISTRY}/datafed/dependencies-${BRANCH_LOWER}:latest" --build-arg RUNTIME="${REGISTRY}/datafed/runtime-${BRANCH_LOWER}:latest" -f ${DOCKER_FILE_PATH} -t "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest" .
    - docker push "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}"

.error_logs_client_end_to_end:
  stage: log
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - docker logs $(docker ps --filter "ancestor=${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" --format "{{.Names}}")
  rules:
    - when: always



# Prevents downstream pipeline from being empty and triggering a failure, the
# build-ws job above may or may not run because of the rules section, if there
# are no jobs in the pipeline GitLab has the unfortunate behavior of reporting
# the trigger as a failure. To prevent the pipeline from being empty the
# placeholder job is created. 
# 
# There are open proposals addressing this issue that have not yet been finished.
# Possibly in the future a "stragetgy: mirror" option could be used to mimic the
# status of the downstream pipeline in the trigger job. See discussion here:
#
# https://gitlab.com/group.gitlab-org/-/epics/11447#proposal

.placeholder:
  stage: build
  tags:
    - docker
  script:
    - echo "placeholder"
