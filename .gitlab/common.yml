---

.image_check:
  tags:
    - docker
  script:
    - |
      BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
      docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
      FORCE_BUILD="FALSE"
      set +e
      docker pull --quiet "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest"
      if [ $? -eq 0 ]; then echo "Image exists"; else FORCE_BUILD="TRUE"; fi;
      set -e
      if [ "$FORCE_BUILD" == "TRUE" ]
      then
        cp .gitlab/build/force_build_${COMPONENT}_image.yml ${COMPONENT}_image.yml
      else
        cp .gitlab/build/build_${COMPONENT}_image.yml ${COMPONENT}_image.yml
      fi
      echo "REGISTRY=${REGISTRY}" >> build.env
      echo "HARBOR_USER=${HARBOR_USER}" >> build.env
      echo "HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN=${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}" >> build.env
      sed -i 's/\(HARBOR_USER=.*\)\$/\1$$/g' build.env
  artifacts:
    paths:
      - ${COMPONENT}_image.yml 
    reports:
      dotenv: build.env

# NOTE
#
# Cases have been observed where an image has been pushed to the image registry but 
# but the image for some reason is not registered with the Harbor instance. The
# retry loop is used to retry pushing to the registry to add some resliency to the
# ci pipeline in the case of poor networking issues while attempting to upload
.docker_base_build_script:
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - docker system prune -f
    - docker build -f "${DOCKER_FILE_PATH}" -t "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest" .
    - docker tag "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest" "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:$CI_COMMIT_SHA"
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - export DATAFED_HARBOR_REPOSITORY="${IMAGE_TAG}-${BRANCH_LOWER}"
    - export DATAFED_HARBOR_USERNAME="${HARBOR_USER}"
    - export DATAFED_HARBOR_PASSWORD="${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - docker push "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:latest"
    - docker push "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:$CI_COMMIT_SHA"
    - |
      while [ "$(./scripts/ci_harbor_artifact_count.sh)" == "0" ]; do
        echo "Artifact missing from harbor..."
        docker push "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:latest"
        docker push "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:$CI_COMMIT_SHA"
        sleep 5  # Optional: Add a sleep to avoid busy waiting 
      done
    - cat "./harbor_check.log"

.docker_build_script:
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - docker build --build-arg DEPENDENCIES="${REGISTRY}/datafed/dependencies-${BRANCH_LOWER}:latest" --build-arg RUNTIME="${REGISTRY}/datafed/runtime-${BRANCH_LOWER}:latest" -f ${DOCKER_FILE_PATH} -t "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest" .
    - docker tag "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:latest" "${REGISTRY}/${IMAGE_TAG}-${BRANCH_LOWER}:$CI_COMMIT_SHA"
    - export DATAFED_HARBOR_REPOSITORY="${IMAGE_TAG}-${BRANCH_LOWER}"
    - export DATAFED_HARBOR_USERNAME="${HARBOR_USER}"
    - export DATAFED_HARBOR_PASSWORD="${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - docker push "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:latest"
    - docker push "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:$CI_COMMIT_SHA"
    - |
      while [ "$(./scripts/ci_harbor_artifact_count.sh)" == "0" ]; do
        echo "Artifact missing from harbor..."
        docker push "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:latest"
        docker push "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:$CI_COMMIT_SHA"
        sleep 5  # Optional: Add a sleep to avoid busy waiting 
      done
    - cat "./harbor_check.log"

.error_logs_client_end_to_end:
  stage: log
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - docker logs $(docker ps --filter "ancestor=${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" --format "{{.Names}}")
  rules:
    - when: always

# In the case that we are not needing to actually rebuild the image we want to retag the image that already exists
# in harbor with the current commit, this is so that when we are running tests that are dependent on the  container
# we know that it is the right container.
.docker_retag_image:
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - export DATAFED_HARBOR_REPOSITORY="${IMAGE_TAG}-${BRANCH_LOWER}"
    - export DATAFED_HARBOR_IMAGE_TAG=${CI_COMMIT_SHA}
    - export DATAFED_HARBOR_USERNAME="${HARBOR_USER}"
    - export DATAFED_HARBOR_PASSWORD="${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - echo "$BRANCH_LOWER"
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - docker pull "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:latest"
    - docker tag "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:latest" "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:$CI_COMMIT_SHA"
    - docker push "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:$CI_COMMIT_SHA"
    - |
      while [ "$(./scripts/ci_harbor_artifact_count.sh)" == "0" ]; do
        echo "Artifact missing from harbor..."
        docker push "${REGISTRY}/${DATAFED_HARBOR_REPOSITORY}:$CI_COMMIT_SHA"
        sleep 5  # Optional: Add a sleep to avoid busy waiting 
      done
    - cat "./harbor_check.log"
